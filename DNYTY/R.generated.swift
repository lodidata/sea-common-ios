//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `loading_icon.gif`.
    static let loading_iconGif = Rswift.FileResource(bundle: R.hostingBundle, name: "loading_icon", pathExtension: "gif")
    /// Resource file `mini-game-logo.gif`.
    static let miniGameLogoGif = Rswift.FileResource(bundle: R.hostingBundle, name: "mini-game-logo", pathExtension: "gif")

    /// `bundle.url(forResource: "loading_icon", withExtension: "gif")`
    static func loading_iconGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading_iconGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mini-game-logo", withExtension: "gif")`
    static func miniGameLogoGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.miniGameLogoGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 235 images.
  struct image {
    /// Image `account_bg_icon`.
    static let account_bg_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "account_bg_icon")
    /// Image `account_top_bg`.
    static let account_top_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "account_top_bg")
    /// Image `account_top_item_bg`.
    static let account_top_item_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "account_top_item_bg")
    /// Image `add_icon`.
    static let add_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_icon")
    /// Image `agency_icon1`.
    static let agency_icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "agency_icon1")
    /// Image `all_game`.
    static let all_game = Rswift.ImageResource(bundle: R.hostingBundle, name: "all_game")
    /// Image `arrow_down_tri`.
    static let arrow_down_tri = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_down_tri")
    /// Image `arrow_down_white`.
    static let arrow_down_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_down_white")
    /// Image `arrow_right_black`.
    static let arrow_right_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right_black")
    /// Image `arrow_right_list`.
    static let arrow_right_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right_list")
    /// Image `arrow_right_purple`.
    static let arrow_right_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right_purple")
    /// Image `auto_topup`.
    static let auto_topup = Rswift.ImageResource(bundle: R.hostingBundle, name: "auto_topup")
    /// Image `back_gray`.
    static let back_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_gray")
    /// Image `background-1`.
    static let background1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "background-1")
    /// Image `background-2`.
    static let background2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "background-2")
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `bankCard_icon`.
    static let bankCard_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "bankCard_icon")
    /// Image `banner_register`.
    static let banner_register = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner_register")
    /// Image `bofang`.
    static let bofang = Rswift.ImageResource(bundle: R.hostingBundle, name: "bofang")
    /// Image `btn-center`.
    static let btnCenter = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn-center")
    /// Image `btn-pin`.
    static let btnPin = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn-pin")
    /// Image `cannder_icon`.
    static let cannder_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "cannder_icon")
    /// Image `casino`.
    static let casino = Rswift.ImageResource(bundle: R.hostingBundle, name: "casino")
    /// Image `close_btn1`.
    static let close_btn1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_btn1")
    /// Image `close_btn2`.
    static let close_btn2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_btn2")
    /// Image `close_w1`.
    static let close_w1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_w1")
    /// Image `close_white`.
    static let close_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_white")
    /// Image `copy_btn2`.
    static let copy_btn2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "copy_btn2")
    /// Image `copy_icon`.
    static let copy_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "copy_icon")
    /// Image `cost_icon`.
    static let cost_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "cost_icon")
    /// Image `date_icon1`.
    static let date_icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "date_icon1")
    /// Image `delete_btn1`.
    static let delete_btn1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_btn1")
    /// Image `delete_icon`.
    static let delete_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_icon")
    /// Image `dengduoshezhi`.
    static let dengduoshezhi = Rswift.ImageResource(bundle: R.hostingBundle, name: "dengduoshezhi")
    /// Image `deposit_hit2`.
    static let deposit_hit2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "deposit_hit2")
    /// Image `deposit_search1`.
    static let deposit_search1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "deposit_search1")
    /// Image `diamond`.
    static let diamond = Rswift.ImageResource(bundle: R.hostingBundle, name: "diamond")
    /// Image `discount_info1`.
    static let discount_info1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "discount_info1")
    /// Image `discount_nav_icon`.
    static let discount_nav_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "discount_nav_icon")
    /// Image `discount_noness_icon`.
    static let discount_noness_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "discount_noness_icon")
    /// Image `down_icon_red`.
    static let down_icon_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "down_icon_red")
    /// Image `down_more_gray`.
    static let down_more_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "down_more_gray")
    /// Image `edit_icon`.
    static let edit_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_icon")
    /// Image `email_icon`.
    static let email_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "email_icon")
    /// Image `exit_icon`.
    static let exit_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "exit_icon")
    /// Image `explain1`.
    static let explain1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "explain1")
    /// Image `eye_close`.
    static let eye_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye_close")
    /// Image `eye_open`.
    static let eye_open = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye_open")
    /// Image `fanhui`.
    static let fanhui = Rswift.ImageResource(bundle: R.hostingBundle, name: "fanhui")
    /// Image `fin_deposit_total`.
    static let fin_deposit_total = Rswift.ImageResource(bundle: R.hostingBundle, name: "fin_deposit_total")
    /// Image `fin_enter_r`.
    static let fin_enter_r = Rswift.ImageResource(bundle: R.hostingBundle, name: "fin_enter_r")
    /// Image `fin_withdraw_total`.
    static let fin_withdraw_total = Rswift.ImageResource(bundle: R.hostingBundle, name: "fin_withdraw_total")
    /// Image `finance_record`.
    static let finance_record = Rswift.ImageResource(bundle: R.hostingBundle, name: "finance_record")
    /// Image `fish`.
    static let fish = Rswift.ImageResource(bundle: R.hostingBundle, name: "fish")
    /// Image `flag_yg`.
    static let flag_yg = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag_yg")
    /// Image `flag_zg`.
    static let flag_zg = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag_zg")
    /// Image `game_placeholder`.
    static let game_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "game_placeholder")
    /// Image `game_record`.
    static let game_record = Rswift.ImageResource(bundle: R.hostingBundle, name: "game_record")
    /// Image `gcash`.
    static let gcash = Rswift.ImageResource(bundle: R.hostingBundle, name: "gcash")
    /// Image `guanbi_bai`.
    static let guanbi_bai = Rswift.ImageResource(bundle: R.hostingBundle, name: "guanbi_bai")
    /// Image `h_ljt`.
    static let h_ljt = Rswift.ImageResource(bundle: R.hostingBundle, name: "h_ljt")
    /// Image `head_spread_bg`.
    static let head_spread_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "head_spread_bg")
    /// Image `help_center`.
    static let help_center = Rswift.ImageResource(bundle: R.hostingBundle, name: "help_center")
    /// Image `help_cj`.
    static let help_cj = Rswift.ImageResource(bundle: R.hostingBundle, name: "help_cj")
    /// Image `help_deposit`.
    static let help_deposit = Rswift.ImageResource(bundle: R.hostingBundle, name: "help_deposit")
    /// Image `help_other`.
    static let help_other = Rswift.ImageResource(bundle: R.hostingBundle, name: "help_other")
    /// Image `help_withdraw`.
    static let help_withdraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "help_withdraw")
    /// Image `help_xy`.
    static let help_xy = Rswift.ImageResource(bundle: R.hostingBundle, name: "help_xy")
    /// Image `help_ys`.
    static let help_ys = Rswift.ImageResource(bundle: R.hostingBundle, name: "help_ys")
    /// Image `hit_b`.
    static let hit_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "hit_b")
    /// Image `hit_r`.
    static let hit_r = Rswift.ImageResource(bundle: R.hostingBundle, name: "hit_r")
    /// Image `home_18`.
    static let home_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_18")
    /// Image `home_ab1`.
    static let home_ab1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_ab1")
    /// Image `home_ab2`.
    static let home_ab2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_ab2")
    /// Image `home_ab3`.
    static let home_ab3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_ab3")
    /// Image `home_ab4`.
    static let home_ab4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_ab4")
    /// Image `home_ab5`.
    static let home_ab5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_ab5")
    /// Image `home_bg1`.
    static let home_bg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_bg1")
    /// Image `home_btn_select2`.
    static let home_btn_select2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_btn_select2")
    /// Image `home_btnbg_select1`.
    static let home_btnbg_select1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_btnbg_select1")
    /// Image `home_btnbg`.
    static let home_btnbg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_btnbg")
    /// Image `home_dbz`.
    static let home_dbz = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_dbz")
    /// Image `home_hot_btn`.
    static let home_hot_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_hot_btn")
    /// Image `home_hot_sel`.
    static let home_hot_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_hot_sel")
    /// Image `home_icon1`.
    static let home_icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_icon1")
    /// Image `home_logo`.
    static let home_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_logo")
    /// Image `home_pl`.
    static let home_pl = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_pl")
    /// Image `home_qtzc`.
    static let home_qtzc = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_qtzc")
    /// Image `home_search`.
    static let home_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_search")
    /// Image `home_yd`.
    static let home_yd = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_yd")
    /// Image `home_zf`.
    static let home_zf = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_zf")
    /// Image `hot_sel2`.
    static let hot_sel2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "hot_sel2")
    /// Image `improve_icon`.
    static let improve_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "improve_icon")
    /// Image `instagram_share`.
    static let instagram_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagram_share")
    /// Image `jiejika`.
    static let jiejika = Rswift.ImageResource(bundle: R.hostingBundle, name: "jiejika")
    /// Image `kefu_icon`.
    static let kefu_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "kefu_icon")
    /// Image `kefu`.
    static let kefu = Rswift.ImageResource(bundle: R.hostingBundle, name: "kefu")
    /// Image `lan_flag_en`.
    static let lan_flag_en = Rswift.ImageResource(bundle: R.hostingBundle, name: "lan_flag_en")
    /// Image `launch_bg`.
    static let launch_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_bg")
    /// Image `launch_icon`.
    static let launch_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_icon")
    /// Image `line_share`.
    static let line_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "line_share")
    /// Image `link_copy`.
    static let link_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "link_copy")
    /// Image `list_enter_white`.
    static let list_enter_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "list_enter_white")
    /// Image `list_show_d`.
    static let list_show_d = Rswift.ImageResource(bundle: R.hostingBundle, name: "list_show_d")
    /// Image `list_show_s`.
    static let list_show_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "list_show_s")
    /// Image `loading_icon.gif`.
    static let loading_iconGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading_icon.gif")
    /// Image `local_bank_qr`.
    static let local_bank_qr = Rswift.ImageResource(bundle: R.hostingBundle, name: "local_bank_qr")
    /// Image `logo1`.
    static let logo1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo1")
    /// Image `logo2`.
    static let logo2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo2")
    /// Image `logo3`.
    static let logo3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo3")
    /// Image `logo4`.
    static let logo4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo4")
    /// Image `logo5`.
    static let logo5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo5")
    /// Image `logo6`.
    static let logo6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo6")
    /// Image `logo7`.
    static let logo7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo7")
    /// Image `logo8`.
    static let logo8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo8")
    /// Image `logo9`.
    static let logo9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo9")
    /// Image `logo_s1_10`.
    static let logo_s1_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s1_10")
    /// Image `logo_s1_11`.
    static let logo_s1_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s1_11")
    /// Image `logo_s1_1`.
    static let logo_s1_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s1_1")
    /// Image `logo_s1_2`.
    static let logo_s1_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s1_2")
    /// Image `logo_s1_3`.
    static let logo_s1_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s1_3")
    /// Image `logo_s1_4`.
    static let logo_s1_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s1_4")
    /// Image `logo_s1_5`.
    static let logo_s1_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s1_5")
    /// Image `logo_s1_6`.
    static let logo_s1_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s1_6")
    /// Image `logo_s1_7`.
    static let logo_s1_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s1_7")
    /// Image `logo_s1_8`.
    static let logo_s1_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s1_8")
    /// Image `logo_s1_9`.
    static let logo_s1_9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s1_9")
    /// Image `logo_s2_1`.
    static let logo_s2_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s2_1")
    /// Image `logo_s2_2`.
    static let logo_s2_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s2_2")
    /// Image `logo_s2_3`.
    static let logo_s2_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s2_3")
    /// Image `logo_s2_4`.
    static let logo_s2_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s2_4")
    /// Image `logo_s2_5`.
    static let logo_s2_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s2_5")
    /// Image `logo_s3_1`.
    static let logo_s3_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s3_1")
    /// Image `logo_s3_2`.
    static let logo_s3_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_s3_2")
    /// Image `look_video`.
    static let look_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "look_video")
    /// Image `messerger_share`.
    static let messerger_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "messerger_share")
    /// Image `mini-game-logo.gif`.
    static let miniGameLogoGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "mini-game-logo.gif")
    /// Image `money_icon`.
    static let money_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "money_icon")
    /// Image `month_award`.
    static let month_award = Rswift.ImageResource(bundle: R.hostingBundle, name: "month_award")
    /// Image `navi_back`.
    static let navi_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "navi_back")
    /// Image `next_level_water`.
    static let next_level_water = Rswift.ImageResource(bundle: R.hostingBundle, name: "next_level_water")
    /// Image `next_level`.
    static let next_level = Rswift.ImageResource(bundle: R.hostingBundle, name: "next_level")
    /// Image `no_discount_icon`.
    static let no_discount_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_discount_icon")
    /// Image `no_game`.
    static let no_game = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_game")
    /// Image `no_record`.
    static let no_record = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_record")
    /// Image `noti_close1`.
    static let noti_close1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "noti_close1")
    /// Image `null_data_icon`.
    static let null_data_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "null_data_icon")
    /// Image `pay_hit_btn`.
    static let pay_hit_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "pay_hit_btn")
    /// Image `person_profit`.
    static let person_profit = Rswift.ImageResource(bundle: R.hostingBundle, name: "person_profit")
    /// Image `phone_download`.
    static let phone_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone_download")
    /// Image `play_center`.
    static let play_center = Rswift.ImageResource(bundle: R.hostingBundle, name: "play_center")
    /// Image `pokdeng`.
    static let pokdeng = Rswift.ImageResource(bundle: R.hostingBundle, name: "pokdeng")
    /// Image `protocol_agree_icon`.
    static let protocol_agree_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "protocol_agree_icon")
    /// Image `protocol_blank_icon`.
    static let protocol_blank_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "protocol_blank_icon")
    /// Image `quanpin`.
    static let quanpin = Rswift.ImageResource(bundle: R.hostingBundle, name: "quanpin")
    /// Image `read_enble`.
    static let read_enble = Rswift.ImageResource(bundle: R.hostingBundle, name: "read_enble")
    /// Image `read_unenble`.
    static let read_unenble = Rswift.ImageResource(bundle: R.hostingBundle, name: "read_unenble")
    /// Image `rechange_icon`.
    static let rechange_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "rechange_icon")
    /// Image `recommend_bg`.
    static let recommend_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "recommend_bg")
    /// Image `refresh_black`.
    static let refresh_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_black")
    /// Image `refresh_purple`.
    static let refresh_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_purple")
    /// Image `refresh_white`.
    static let refresh_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_white")
    /// Image `register_user_icon`.
    static let register_user_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_user_icon")
    /// Image `rule_introduce`.
    static let rule_introduce = Rswift.ImageResource(bundle: R.hostingBundle, name: "rule_introduce")
    /// Image `scroll_notices`.
    static let scroll_notices = Rswift.ImageResource(bundle: R.hostingBundle, name: "scroll_notices")
    /// Image `search_black`.
    static let search_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_black")
    /// Image `select_icon`.
    static let select_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "select_icon")
    /// Image `self_water_icon`.
    static let self_water_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "self_water_icon")
    /// Image `share_big`.
    static let share_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_big")
    /// Image `shengyin`.
    static let shengyin = Rswift.ImageResource(bundle: R.hostingBundle, name: "shengyin")
    /// Image `shuaxin3`.
    static let shuaxin3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "shuaxin3")
    /// Image `slot`.
    static let slot = Rswift.ImageResource(bundle: R.hostingBundle, name: "slot")
    /// Image `sport`.
    static let sport = Rswift.ImageResource(bundle: R.hostingBundle, name: "sport")
    /// Image `spread_icon`.
    static let spread_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "spread_icon")
    /// Image `stroke_line`.
    static let stroke_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "stroke_line")
    /// Image `tab_account_sel`.
    static let tab_account_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_account_sel")
    /// Image `tab_account`.
    static let tab_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_account")
    /// Image `tab_discount_sel`.
    static let tab_discount_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_discount_sel")
    /// Image `tab_discount`.
    static let tab_discount = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_discount")
    /// Image `tab_gudong_sel`.
    static let tab_gudong_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_gudong_sel")
    /// Image `tab_gudong`.
    static let tab_gudong = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_gudong")
    /// Image `tab_home_select`.
    static let tab_home_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home_select")
    /// Image `tab_home`.
    static let tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home")
    /// Image `tab_recharge_sel`.
    static let tab_recharge_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_recharge_sel")
    /// Image `tab_recharge`.
    static let tab_recharge = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_recharge")
    /// Image `tab_withdraw_sel`.
    static let tab_withdraw_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_withdraw_sel")
    /// Image `tab_withdraw`.
    static let tab_withdraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_withdraw")
    /// Image `table_more_w`.
    static let table_more_w = Rswift.ImageResource(bundle: R.hostingBundle, name: "table_more_w")
    /// Image `tanhao_gray`.
    static let tanhao_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "tanhao_gray")
    /// Image `tanhao_red`.
    static let tanhao_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "tanhao_red")
    /// Image `telegram_share`.
    static let telegram_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "telegram_share")
    /// Image `total_rechange_e`.
    static let total_rechange_e = Rswift.ImageResource(bundle: R.hostingBundle, name: "total_rechange_e")
    /// Image `total_rechange_icon`.
    static let total_rechange_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "total_rechange_icon")
    /// Image `total_water_yellow`.
    static let total_water_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "total_water_yellow")
    /// Image `total_water`.
    static let total_water = Rswift.ImageResource(bundle: R.hostingBundle, name: "total_water")
    /// Image `transfer`.
    static let transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "transfer")
    /// Image `unSelect_icon`.
    static let unSelect_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "unSelect_icon")
    /// Image `undelete_icon`.
    static let undelete_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "undelete_icon")
    /// Image `up_icon`.
    static let up_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "up_icon")
    /// Image `viber_share`.
    static let viber_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "viber_share")
    /// Image `video_bg`.
    static let video_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_bg")
    /// Image `video_fengmian`.
    static let video_fengmian = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_fengmian")
    /// Image `vip0`.
    static let vip0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip0")
    /// Image `vip10`.
    static let vip10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip10")
    /// Image `vip1`.
    static let vip1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip1")
    /// Image `vip2`.
    static let vip2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip2")
    /// Image `vip3`.
    static let vip3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip3")
    /// Image `vip4`.
    static let vip4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip4")
    /// Image `vip5`.
    static let vip5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip5")
    /// Image `vip6`.
    static let vip6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip6")
    /// Image `vip7`.
    static let vip7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip7")
    /// Image `vip8`.
    static let vip8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip8")
    /// Image `vip9`.
    static let vip9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip9")
    /// Image `vip_entry`.
    static let vip_entry = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip_entry")
    /// Image `vip_hide_btn`.
    static let vip_hide_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip_hide_btn")
    /// Image `vip_icon`.
    static let vip_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip_icon")
    /// Image `vip_open_btn`.
    static let vip_open_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip_open_btn")
    /// Image `vip_show_btn`.
    static let vip_show_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip_show_btn")
    /// Image `vip_yincang`.
    static let vip_yincang = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip_yincang")
    /// Image `vip_zhankai`.
    static let vip_zhankai = Rswift.ImageResource(bundle: R.hostingBundle, name: "vip_zhankai")
    /// Image `wallet_bg_icon`.
    static let wallet_bg_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_bg_icon")
    /// Image `wallet_icon`.
    static let wallet_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_icon")
    /// Image `wallet_money`.
    static let wallet_money = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_money")
    /// Image `walltet_account_bg`.
    static let walltet_account_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "walltet_account_bg")
    /// Image `walltet_account`.
    static let walltet_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "walltet_account")
    /// Image `walltet_bg`.
    static let walltet_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "walltet_bg")
    /// Image `week_award`.
    static let week_award = Rswift.ImageResource(bundle: R.hostingBundle, name: "week_award")
    /// Image `whatsapp_share`.
    static let whatsapp_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "whatsapp_share")
    /// Image `withdraw_bg`.
    static let withdraw_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "withdraw_bg")
    /// Image `withdraw_icon`.
    static let withdraw_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "withdraw_icon")
    /// Image `xjzz`.
    static let xjzz = Rswift.ImageResource(bundle: R.hostingBundle, name: "xjzz")
    /// Image `yingkui_icon`.
    static let yingkui_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "yingkui_icon")
    /// Image `yingli_icon`.
    static let yingli_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "yingli_icon")
    /// Image `zhuangpan`.
    static let zhuangpan = Rswift.ImageResource(bundle: R.hostingBundle, name: "zhuangpan")
    /// Image `zhuche_anniu`.
    static let zhuche_anniu = Rswift.ImageResource(bundle: R.hostingBundle, name: "zhuche_anniu")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account_bg_icon", bundle: ..., traitCollection: ...)`
    static func account_bg_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_bg_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account_top_bg", bundle: ..., traitCollection: ...)`
    static func account_top_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_top_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account_top_item_bg", bundle: ..., traitCollection: ...)`
    static func account_top_item_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_top_item_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_icon", bundle: ..., traitCollection: ...)`
    static func add_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "agency_icon1", bundle: ..., traitCollection: ...)`
    static func agency_icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.agency_icon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "all_game", bundle: ..., traitCollection: ...)`
    static func all_game(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.all_game, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_down_tri", bundle: ..., traitCollection: ...)`
    static func arrow_down_tri(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down_tri, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_down_white", bundle: ..., traitCollection: ...)`
    static func arrow_down_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_right_black", bundle: ..., traitCollection: ...)`
    static func arrow_right_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_right_list", bundle: ..., traitCollection: ...)`
    static func arrow_right_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right_list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_right_purple", bundle: ..., traitCollection: ...)`
    static func arrow_right_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "auto_topup", bundle: ..., traitCollection: ...)`
    static func auto_topup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.auto_topup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_gray", bundle: ..., traitCollection: ...)`
    static func back_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background-1", bundle: ..., traitCollection: ...)`
    static func background1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background-2", bundle: ..., traitCollection: ...)`
    static func background2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bankCard_icon", bundle: ..., traitCollection: ...)`
    static func bankCard_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bankCard_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner_register", bundle: ..., traitCollection: ...)`
    static func banner_register(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner_register, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bofang", bundle: ..., traitCollection: ...)`
    static func bofang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bofang, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn-center", bundle: ..., traitCollection: ...)`
    static func btnCenter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnCenter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn-pin", bundle: ..., traitCollection: ...)`
    static func btnPin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnPin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cannder_icon", bundle: ..., traitCollection: ...)`
    static func cannder_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cannder_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "casino", bundle: ..., traitCollection: ...)`
    static func casino(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.casino, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close_btn1", bundle: ..., traitCollection: ...)`
    static func close_btn1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_btn1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close_btn2", bundle: ..., traitCollection: ...)`
    static func close_btn2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_btn2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close_w1", bundle: ..., traitCollection: ...)`
    static func close_w1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_w1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close_white", bundle: ..., traitCollection: ...)`
    static func close_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "copy_btn2", bundle: ..., traitCollection: ...)`
    static func copy_btn2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copy_btn2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "copy_icon", bundle: ..., traitCollection: ...)`
    static func copy_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copy_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cost_icon", bundle: ..., traitCollection: ...)`
    static func cost_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cost_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "date_icon1", bundle: ..., traitCollection: ...)`
    static func date_icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.date_icon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete_btn1", bundle: ..., traitCollection: ...)`
    static func delete_btn1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_btn1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete_icon", bundle: ..., traitCollection: ...)`
    static func delete_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dengduoshezhi", bundle: ..., traitCollection: ...)`
    static func dengduoshezhi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dengduoshezhi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deposit_hit2", bundle: ..., traitCollection: ...)`
    static func deposit_hit2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deposit_hit2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deposit_search1", bundle: ..., traitCollection: ...)`
    static func deposit_search1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deposit_search1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "diamond", bundle: ..., traitCollection: ...)`
    static func diamond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diamond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discount_info1", bundle: ..., traitCollection: ...)`
    static func discount_info1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discount_info1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discount_nav_icon", bundle: ..., traitCollection: ...)`
    static func discount_nav_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discount_nav_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discount_noness_icon", bundle: ..., traitCollection: ...)`
    static func discount_noness_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discount_noness_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "down_icon_red", bundle: ..., traitCollection: ...)`
    static func down_icon_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.down_icon_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "down_more_gray", bundle: ..., traitCollection: ...)`
    static func down_more_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.down_more_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_icon", bundle: ..., traitCollection: ...)`
    static func edit_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email_icon", bundle: ..., traitCollection: ...)`
    static func email_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exit_icon", bundle: ..., traitCollection: ...)`
    static func exit_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exit_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "explain1", bundle: ..., traitCollection: ...)`
    static func explain1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.explain1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye_close", bundle: ..., traitCollection: ...)`
    static func eye_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye_open", bundle: ..., traitCollection: ...)`
    static func eye_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye_open, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fanhui", bundle: ..., traitCollection: ...)`
    static func fanhui(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fanhui, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fin_deposit_total", bundle: ..., traitCollection: ...)`
    static func fin_deposit_total(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fin_deposit_total, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fin_enter_r", bundle: ..., traitCollection: ...)`
    static func fin_enter_r(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fin_enter_r, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fin_withdraw_total", bundle: ..., traitCollection: ...)`
    static func fin_withdraw_total(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fin_withdraw_total, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "finance_record", bundle: ..., traitCollection: ...)`
    static func finance_record(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.finance_record, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fish", bundle: ..., traitCollection: ...)`
    static func fish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag_yg", bundle: ..., traitCollection: ...)`
    static func flag_yg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag_yg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag_zg", bundle: ..., traitCollection: ...)`
    static func flag_zg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag_zg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "game_placeholder", bundle: ..., traitCollection: ...)`
    static func game_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.game_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "game_record", bundle: ..., traitCollection: ...)`
    static func game_record(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.game_record, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gcash", bundle: ..., traitCollection: ...)`
    static func gcash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gcash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guanbi_bai", bundle: ..., traitCollection: ...)`
    static func guanbi_bai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guanbi_bai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "h_ljt", bundle: ..., traitCollection: ...)`
    static func h_ljt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.h_ljt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head_spread_bg", bundle: ..., traitCollection: ...)`
    static func head_spread_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.head_spread_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help_center", bundle: ..., traitCollection: ...)`
    static func help_center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help_center, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help_cj", bundle: ..., traitCollection: ...)`
    static func help_cj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help_cj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help_deposit", bundle: ..., traitCollection: ...)`
    static func help_deposit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help_deposit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help_other", bundle: ..., traitCollection: ...)`
    static func help_other(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help_other, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help_withdraw", bundle: ..., traitCollection: ...)`
    static func help_withdraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help_withdraw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help_xy", bundle: ..., traitCollection: ...)`
    static func help_xy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help_xy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help_ys", bundle: ..., traitCollection: ...)`
    static func help_ys(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help_ys, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hit_b", bundle: ..., traitCollection: ...)`
    static func hit_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hit_b, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hit_r", bundle: ..., traitCollection: ...)`
    static func hit_r(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hit_r, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_18", bundle: ..., traitCollection: ...)`
    static func home_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_ab1", bundle: ..., traitCollection: ...)`
    static func home_ab1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_ab1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_ab2", bundle: ..., traitCollection: ...)`
    static func home_ab2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_ab2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_ab3", bundle: ..., traitCollection: ...)`
    static func home_ab3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_ab3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_ab4", bundle: ..., traitCollection: ...)`
    static func home_ab4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_ab4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_ab5", bundle: ..., traitCollection: ...)`
    static func home_ab5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_ab5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_bg1", bundle: ..., traitCollection: ...)`
    static func home_bg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_bg1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_btn_select2", bundle: ..., traitCollection: ...)`
    static func home_btn_select2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_btn_select2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_btnbg", bundle: ..., traitCollection: ...)`
    static func home_btnbg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_btnbg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_btnbg_select1", bundle: ..., traitCollection: ...)`
    static func home_btnbg_select1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_btnbg_select1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_dbz", bundle: ..., traitCollection: ...)`
    static func home_dbz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_dbz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_hot_btn", bundle: ..., traitCollection: ...)`
    static func home_hot_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_hot_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_hot_sel", bundle: ..., traitCollection: ...)`
    static func home_hot_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_hot_sel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_icon1", bundle: ..., traitCollection: ...)`
    static func home_icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_icon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_logo", bundle: ..., traitCollection: ...)`
    static func home_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_pl", bundle: ..., traitCollection: ...)`
    static func home_pl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_pl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_qtzc", bundle: ..., traitCollection: ...)`
    static func home_qtzc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_qtzc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_search", bundle: ..., traitCollection: ...)`
    static func home_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_yd", bundle: ..., traitCollection: ...)`
    static func home_yd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_yd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_zf", bundle: ..., traitCollection: ...)`
    static func home_zf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_zf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hot_sel2", bundle: ..., traitCollection: ...)`
    static func hot_sel2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hot_sel2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "improve_icon", bundle: ..., traitCollection: ...)`
    static func improve_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.improve_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagram_share", bundle: ..., traitCollection: ...)`
    static func instagram_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagram_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jiejika", bundle: ..., traitCollection: ...)`
    static func jiejika(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jiejika, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kefu", bundle: ..., traitCollection: ...)`
    static func kefu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kefu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kefu_icon", bundle: ..., traitCollection: ...)`
    static func kefu_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kefu_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lan_flag_en", bundle: ..., traitCollection: ...)`
    static func lan_flag_en(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lan_flag_en, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch_bg", bundle: ..., traitCollection: ...)`
    static func launch_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch_icon", bundle: ..., traitCollection: ...)`
    static func launch_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "line_share", bundle: ..., traitCollection: ...)`
    static func line_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "link_copy", bundle: ..., traitCollection: ...)`
    static func link_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.link_copy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list_enter_white", bundle: ..., traitCollection: ...)`
    static func list_enter_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list_enter_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list_show_d", bundle: ..., traitCollection: ...)`
    static func list_show_d(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list_show_d, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list_show_s", bundle: ..., traitCollection: ...)`
    static func list_show_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list_show_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loading_icon.gif", bundle: ..., traitCollection: ...)`
    static func loading_iconGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loading_iconGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "local_bank_qr", bundle: ..., traitCollection: ...)`
    static func local_bank_qr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.local_bank_qr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo1", bundle: ..., traitCollection: ...)`
    static func logo1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo2", bundle: ..., traitCollection: ...)`
    static func logo2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo3", bundle: ..., traitCollection: ...)`
    static func logo3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo4", bundle: ..., traitCollection: ...)`
    static func logo4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo5", bundle: ..., traitCollection: ...)`
    static func logo5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo6", bundle: ..., traitCollection: ...)`
    static func logo6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo7", bundle: ..., traitCollection: ...)`
    static func logo7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo8", bundle: ..., traitCollection: ...)`
    static func logo8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo9", bundle: ..., traitCollection: ...)`
    static func logo9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s1_1", bundle: ..., traitCollection: ...)`
    static func logo_s1_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s1_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s1_10", bundle: ..., traitCollection: ...)`
    static func logo_s1_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s1_10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s1_11", bundle: ..., traitCollection: ...)`
    static func logo_s1_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s1_11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s1_2", bundle: ..., traitCollection: ...)`
    static func logo_s1_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s1_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s1_3", bundle: ..., traitCollection: ...)`
    static func logo_s1_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s1_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s1_4", bundle: ..., traitCollection: ...)`
    static func logo_s1_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s1_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s1_5", bundle: ..., traitCollection: ...)`
    static func logo_s1_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s1_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s1_6", bundle: ..., traitCollection: ...)`
    static func logo_s1_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s1_6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s1_7", bundle: ..., traitCollection: ...)`
    static func logo_s1_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s1_7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s1_8", bundle: ..., traitCollection: ...)`
    static func logo_s1_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s1_8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s1_9", bundle: ..., traitCollection: ...)`
    static func logo_s1_9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s1_9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s2_1", bundle: ..., traitCollection: ...)`
    static func logo_s2_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s2_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s2_2", bundle: ..., traitCollection: ...)`
    static func logo_s2_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s2_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s2_3", bundle: ..., traitCollection: ...)`
    static func logo_s2_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s2_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s2_4", bundle: ..., traitCollection: ...)`
    static func logo_s2_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s2_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s2_5", bundle: ..., traitCollection: ...)`
    static func logo_s2_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s2_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s3_1", bundle: ..., traitCollection: ...)`
    static func logo_s3_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s3_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_s3_2", bundle: ..., traitCollection: ...)`
    static func logo_s3_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_s3_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "look_video", bundle: ..., traitCollection: ...)`
    static func look_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.look_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "messerger_share", bundle: ..., traitCollection: ...)`
    static func messerger_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messerger_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mini-game-logo.gif", bundle: ..., traitCollection: ...)`
    static func miniGameLogoGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.miniGameLogoGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "money_icon", bundle: ..., traitCollection: ...)`
    static func money_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "month_award", bundle: ..., traitCollection: ...)`
    static func month_award(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.month_award, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navi_back", bundle: ..., traitCollection: ...)`
    static func navi_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navi_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "next_level", bundle: ..., traitCollection: ...)`
    static func next_level(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next_level, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "next_level_water", bundle: ..., traitCollection: ...)`
    static func next_level_water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next_level_water, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_discount_icon", bundle: ..., traitCollection: ...)`
    static func no_discount_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_discount_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_game", bundle: ..., traitCollection: ...)`
    static func no_game(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_game, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_record", bundle: ..., traitCollection: ...)`
    static func no_record(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_record, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noti_close1", bundle: ..., traitCollection: ...)`
    static func noti_close1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noti_close1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "null_data_icon", bundle: ..., traitCollection: ...)`
    static func null_data_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.null_data_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pay_hit_btn", bundle: ..., traitCollection: ...)`
    static func pay_hit_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pay_hit_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "person_profit", bundle: ..., traitCollection: ...)`
    static func person_profit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.person_profit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone_download", bundle: ..., traitCollection: ...)`
    static func phone_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phone_download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play_center", bundle: ..., traitCollection: ...)`
    static func play_center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play_center, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pokdeng", bundle: ..., traitCollection: ...)`
    static func pokdeng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pokdeng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "protocol_agree_icon", bundle: ..., traitCollection: ...)`
    static func protocol_agree_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.protocol_agree_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "protocol_blank_icon", bundle: ..., traitCollection: ...)`
    static func protocol_blank_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.protocol_blank_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "quanpin", bundle: ..., traitCollection: ...)`
    static func quanpin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quanpin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "read_enble", bundle: ..., traitCollection: ...)`
    static func read_enble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.read_enble, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "read_unenble", bundle: ..., traitCollection: ...)`
    static func read_unenble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.read_unenble, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rechange_icon", bundle: ..., traitCollection: ...)`
    static func rechange_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rechange_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "recommend_bg", bundle: ..., traitCollection: ...)`
    static func recommend_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recommend_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_black", bundle: ..., traitCollection: ...)`
    static func refresh_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_purple", bundle: ..., traitCollection: ...)`
    static func refresh_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_white", bundle: ..., traitCollection: ...)`
    static func refresh_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "register_user_icon", bundle: ..., traitCollection: ...)`
    static func register_user_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_user_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rule_introduce", bundle: ..., traitCollection: ...)`
    static func rule_introduce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rule_introduce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scroll_notices", bundle: ..., traitCollection: ...)`
    static func scroll_notices(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scroll_notices, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_black", bundle: ..., traitCollection: ...)`
    static func search_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "select_icon", bundle: ..., traitCollection: ...)`
    static func select_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.select_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "self_water_icon", bundle: ..., traitCollection: ...)`
    static func self_water_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.self_water_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share_big", bundle: ..., traitCollection: ...)`
    static func share_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shengyin", bundle: ..., traitCollection: ...)`
    static func shengyin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shengyin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shuaxin3", bundle: ..., traitCollection: ...)`
    static func shuaxin3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shuaxin3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slot", bundle: ..., traitCollection: ...)`
    static func slot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sport", bundle: ..., traitCollection: ...)`
    static func sport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spread_icon", bundle: ..., traitCollection: ...)`
    static func spread_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spread_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stroke_line", bundle: ..., traitCollection: ...)`
    static func stroke_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stroke_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_account", bundle: ..., traitCollection: ...)`
    static func tab_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_account_sel", bundle: ..., traitCollection: ...)`
    static func tab_account_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_account_sel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_discount", bundle: ..., traitCollection: ...)`
    static func tab_discount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_discount, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_discount_sel", bundle: ..., traitCollection: ...)`
    static func tab_discount_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_discount_sel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_gudong", bundle: ..., traitCollection: ...)`
    static func tab_gudong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_gudong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_gudong_sel", bundle: ..., traitCollection: ...)`
    static func tab_gudong_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_gudong_sel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_home", bundle: ..., traitCollection: ...)`
    static func tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_home_select", bundle: ..., traitCollection: ...)`
    static func tab_home_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_recharge", bundle: ..., traitCollection: ...)`
    static func tab_recharge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_recharge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_recharge_sel", bundle: ..., traitCollection: ...)`
    static func tab_recharge_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_recharge_sel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_withdraw", bundle: ..., traitCollection: ...)`
    static func tab_withdraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_withdraw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_withdraw_sel", bundle: ..., traitCollection: ...)`
    static func tab_withdraw_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_withdraw_sel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table_more_w", bundle: ..., traitCollection: ...)`
    static func table_more_w(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table_more_w, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tanhao_gray", bundle: ..., traitCollection: ...)`
    static func tanhao_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tanhao_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tanhao_red", bundle: ..., traitCollection: ...)`
    static func tanhao_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tanhao_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "telegram_share", bundle: ..., traitCollection: ...)`
    static func telegram_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.telegram_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "total_rechange_e", bundle: ..., traitCollection: ...)`
    static func total_rechange_e(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.total_rechange_e, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "total_rechange_icon", bundle: ..., traitCollection: ...)`
    static func total_rechange_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.total_rechange_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "total_water", bundle: ..., traitCollection: ...)`
    static func total_water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.total_water, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "total_water_yellow", bundle: ..., traitCollection: ...)`
    static func total_water_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.total_water_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transfer", bundle: ..., traitCollection: ...)`
    static func transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unSelect_icon", bundle: ..., traitCollection: ...)`
    static func unSelect_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unSelect_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "undelete_icon", bundle: ..., traitCollection: ...)`
    static func undelete_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.undelete_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "up_icon", bundle: ..., traitCollection: ...)`
    static func up_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.up_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "viber_share", bundle: ..., traitCollection: ...)`
    static func viber_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.viber_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_bg", bundle: ..., traitCollection: ...)`
    static func video_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_fengmian", bundle: ..., traitCollection: ...)`
    static func video_fengmian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_fengmian, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip0", bundle: ..., traitCollection: ...)`
    static func vip0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip1", bundle: ..., traitCollection: ...)`
    static func vip1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip10", bundle: ..., traitCollection: ...)`
    static func vip10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip2", bundle: ..., traitCollection: ...)`
    static func vip2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip3", bundle: ..., traitCollection: ...)`
    static func vip3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip4", bundle: ..., traitCollection: ...)`
    static func vip4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip5", bundle: ..., traitCollection: ...)`
    static func vip5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip6", bundle: ..., traitCollection: ...)`
    static func vip6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip7", bundle: ..., traitCollection: ...)`
    static func vip7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip8", bundle: ..., traitCollection: ...)`
    static func vip8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip9", bundle: ..., traitCollection: ...)`
    static func vip9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip_entry", bundle: ..., traitCollection: ...)`
    static func vip_entry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip_entry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip_hide_btn", bundle: ..., traitCollection: ...)`
    static func vip_hide_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip_hide_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip_icon", bundle: ..., traitCollection: ...)`
    static func vip_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip_open_btn", bundle: ..., traitCollection: ...)`
    static func vip_open_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip_open_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip_show_btn", bundle: ..., traitCollection: ...)`
    static func vip_show_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip_show_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip_yincang", bundle: ..., traitCollection: ...)`
    static func vip_yincang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip_yincang, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vip_zhankai", bundle: ..., traitCollection: ...)`
    static func vip_zhankai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vip_zhankai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_bg_icon", bundle: ..., traitCollection: ...)`
    static func wallet_bg_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_bg_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_icon", bundle: ..., traitCollection: ...)`
    static func wallet_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_money", bundle: ..., traitCollection: ...)`
    static func wallet_money(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_money, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walltet_account", bundle: ..., traitCollection: ...)`
    static func walltet_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walltet_account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walltet_account_bg", bundle: ..., traitCollection: ...)`
    static func walltet_account_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walltet_account_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walltet_bg", bundle: ..., traitCollection: ...)`
    static func walltet_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walltet_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "week_award", bundle: ..., traitCollection: ...)`
    static func week_award(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.week_award, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whatsapp_share", bundle: ..., traitCollection: ...)`
    static func whatsapp_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whatsapp_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "withdraw_bg", bundle: ..., traitCollection: ...)`
    static func withdraw_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.withdraw_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "withdraw_icon", bundle: ..., traitCollection: ...)`
    static func withdraw_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.withdraw_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xjzz", bundle: ..., traitCollection: ...)`
    static func xjzz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xjzz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yingkui_icon", bundle: ..., traitCollection: ...)`
    static func yingkui_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yingkui_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yingli_icon", bundle: ..., traitCollection: ...)`
    static func yingli_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yingli_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zhuangpan", bundle: ..., traitCollection: ...)`
    static func zhuangpan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zhuangpan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zhuche_anniu", bundle: ..., traitCollection: ...)`
    static func zhuche_anniu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zhuche_anniu, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `MyMarkerView`.
    static let myMarkerView = _R.nib._MyMarkerView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyMarkerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myMarkerView) instead")
    static func myMarkerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myMarkerView)
    }
    #endif

    static func myMarkerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.myMarkerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 411 localization keys.
    struct localizable {
      /// en translation: * This action may take a while
      ///
      /// Locales: en, zh-Hans
      static let wallet2 = Rswift.StringResource(key: "wallet2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 1. Please select the payment method, fill in the amount, and click Submit.
      ///
      /// Locales: en, zh-Hans
      static let recharge37 = Rswift.StringResource(key: "recharge37", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 2. Then you will be directed to the third-party payment page. Please follow the procedure to make a deposit within the time limit.
      ///
      /// Locales: en, zh-Hans
      static let recharge38 = Rswift.StringResource(key: "recharge38", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 24/7 support
      ///
      /// Locales: en, zh-Hans
      static let home5 = Rswift.StringResource(key: "home5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 3. After the payment, please do not close the window before it confirms that the payment is completed. Otherwise, missing payment may occur.
      ///
      /// Locales: en, zh-Hans
      static let recharge39 = Rswift.StringResource(key: "recharge39", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 4. After receiving the confirmation from the third-party platform, the system will auto-credit the money to your account.
      ///
      /// Locales: en, zh-Hans
      static let recharge40 = Rswift.StringResource(key: "recharge40", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 5. What if the payment is not received? Can’t pay? Please contact Online Customer Support for help.
      ///
      /// Locales: en, zh-Hans
      static let recharge41 = Rswift.StringResource(key: "recharge41", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: About
      ///
      /// Locales: en, zh-Hans
      static let home8 = Rswift.StringResource(key: "home8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static let card2 = Rswift.StringResource(key: "card2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static let depositBank3 = Rswift.StringResource(key: "depositBank3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static let footer4 = Rswift.StringResource(key: "footer4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static let login2 = Rswift.StringResource(key: "login2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static let recharge27 = Rswift.StringResource(key: "recharge27", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static let withdraw11 = Rswift.StringResource(key: "withdraw11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account details
      ///
      /// Locales: en, zh-Hans
      static let finance4 = Rswift.StringResource(key: "finance4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account name
      ///
      /// Locales: en, zh-Hans
      static let recharge26 = Rswift.StringResource(key: "recharge26", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account name
      ///
      /// Locales: en, zh-Hans
      static let withdraw10 = Rswift.StringResource(key: "withdraw10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account number cannot be less than 5 digits
      ///
      /// Locales: en, zh-Hans
      static let errorTxt13 = Rswift.StringResource(key: "errorTxt13", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Actual amount / PHP
      ///
      /// Locales: en, zh-Hans
      static let recharge13 = Rswift.StringResource(key: "recharge13", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Actual deposit
      ///
      /// Locales: en, zh-Hans
      static let recharge19 = Rswift.StringResource(key: "recharge19", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Add a bank card
      ///
      /// Locales: en, zh-Hans
      static let card3 = Rswift.StringResource(key: "card3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Added!
      ///
      /// Locales: en, zh-Hans
      static let successTxt = Rswift.StringResource(key: "successTxt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Agent
      ///
      /// Locales: en, zh-Hans
      static let agency50 = Rswift.StringResource(key: "agency50", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: All
      ///
      /// Locales: en, zh-Hans
      static let type2Txt1 = Rswift.StringResource(key: "type2Txt1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: All wallets
      ///
      /// Locales: en, zh-Hans
      static let account9 = Rswift.StringResource(key: "account9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, zh-Hans
      static let finance16 = Rswift.StringResource(key: "finance16", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Amount conversion
      ///
      /// Locales: en, zh-Hans
      static let type2Txt11 = Rswift.StringResource(key: "type2Txt11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Amount limit
      ///
      /// Locales: en, zh-Hans
      static let withdraw7 = Rswift.StringResource(key: "withdraw7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Announcement
      ///
      /// Locales: en, zh-Hans
      static let account6 = Rswift.StringResource(key: "account6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Announcement Centre
      ///
      /// Locales: en, zh-Hans
      static let notice0 = Rswift.StringResource(key: "notice0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Announcements
      ///
      /// Locales: en, zh-Hans
      static let home14 = Rswift.StringResource(key: "home14", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Apply today
      ///
      /// Locales: en, zh-Hans
      static let discount4 = Rswift.StringResource(key: "discount4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Are you sure to delete the Standard Chartered bank card?
      ///
      /// Locales: en, zh-Hans
      static let text7 = Rswift.StringResource(key: "text7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Are you sure you want to delete this card? 
      ///
      /// Locales: en, zh-Hans
      static let card18 = Rswift.StringResource(key: "card18", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, zh-Hans
      static let login20 = Rswift.StringResource(key: "login20", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Balance
      ///
      /// Locales: en, zh-Hans
      static let agency7 = Rswift.StringResource(key: "agency7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Balance
      ///
      /// Locales: en, zh-Hans
      static let recharge2 = Rswift.StringResource(key: "recharge2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Balance
      ///
      /// Locales: en, zh-Hans
      static let withdraw1 = Rswift.StringResource(key: "withdraw1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bank
      ///
      /// Locales: en, zh-Hans
      static let card0 = Rswift.StringResource(key: "card0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bank
      ///
      /// Locales: en, zh-Hans
      static let depositBank1 = Rswift.StringResource(key: "depositBank1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bank
      ///
      /// Locales: en, zh-Hans
      static let recharge25 = Rswift.StringResource(key: "recharge25", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bank
      ///
      /// Locales: en, zh-Hans
      static let withdraw9 = Rswift.StringResource(key: "withdraw9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bank account number
      ///
      /// Locales: en, zh-Hans
      static let card10 = Rswift.StringResource(key: "card10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bank card management
      ///
      /// Locales: en, zh-Hans
      static let account9Txt = Rswift.StringResource(key: "account9Txt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bank card management
      ///
      /// Locales: en, zh-Hans
      static let card5 = Rswift.StringResource(key: "card5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bank name
      ///
      /// Locales: en, zh-Hans
      static let card8 = Rswift.StringResource(key: "card8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Beneficiary bank
      ///
      /// Locales: en, zh-Hans
      static let recharge20 = Rswift.StringResource(key: "recharge20", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bet amount
      ///
      /// Locales: en, zh-Hans
      static let game2Txt0 = Rswift.StringResource(key: "game2Txt0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Big Win
      ///
      /// Locales: en, zh-Hans
      static let lotteryTxt8 = Rswift.StringResource(key: "lotteryTxt8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bonus
      ///
      /// Locales: en, zh-Hans
      static let new22 = Rswift.StringResource(key: "new22", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bonus records
      ///
      /// Locales: en, zh-Hans
      static let finance5 = Rswift.StringResource(key: "finance5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Branch name
      ///
      /// Locales: en, zh-Hans
      static let card9 = Rswift.StringResource(key: "card9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static let agency6 = Rswift.StringResource(key: "agency6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static let card19 = Rswift.StringResource(key: "card19", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static let finance8 = Rswift.StringResource(key: "finance8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static let text2 = Rswift.StringResource(key: "text2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static let wallet3 = Rswift.StringResource(key: "wallet3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static let withdraw4 = Rswift.StringResource(key: "withdraw4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancellation
      ///
      /// Locales: en, zh-Hans
      static let type2Txt5 = Rswift.StringResource(key: "type2Txt5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Card transfer bonus
      ///
      /// Locales: en, zh-Hans
      static let vip9 = Rswift.StringResource(key: "vip9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cash flow
      ///
      /// Locales: en, zh-Hans
      static let agency21 = Rswift.StringResource(key: "agency21", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cash flow
      ///
      /// Locales: en, zh-Hans
      static let agency24 = Rswift.StringResource(key: "agency24", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cash flow
      ///
      /// Locales: en, zh-Hans
      static let agency54 = Rswift.StringResource(key: "agency54", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cash flow amount
      ///
      /// Locales: en, zh-Hans
      static let agency31 = Rswift.StringResource(key: "agency31", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Claim records
      ///
      /// Locales: en, zh-Hans
      static let vip15 = Rswift.StringResource(key: "vip15", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, zh-Hans
      static let text1 = Rswift.StringResource(key: "text1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Collapse
      ///
      /// Locales: en, zh-Hans
      static let agency34 = Rswift.StringResource(key: "agency34", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Conditions
      ///
      /// Locales: en, zh-Hans
      static let vip4 = Rswift.StringResource(key: "vip4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, zh-Hans
      static let lotteryTxt10 = Rswift.StringResource(key: "lotteryTxt10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm password
      ///
      /// Locales: en, zh-Hans
      static let login8 = Rswift.StringResource(key: "login8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm password
      ///
      /// Locales: en, zh-Hans
      static let new_psd3 = Rswift.StringResource(key: "new_psd3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm the new password
      ///
      /// Locales: en, zh-Hans
      static let login24 = Rswift.StringResource(key: "login24", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Congratulations on getting
      ///
      /// Locales: en, zh-Hans
      static let lotteryTxt5 = Rswift.StringResource(key: "lotteryTxt5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Contact customer support
      ///
      /// Locales: en, zh-Hans
      static let discount5 = Rswift.StringResource(key: "discount5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Contact customer support
      ///
      /// Locales: en, zh-Hans
      static let login28 = Rswift.StringResource(key: "login28", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, zh-Hans
      static let text5 = Rswift.StringResource(key: "text5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy
      ///
      /// Locales: en, zh-Hans
      static let agency43 = Rswift.StringResource(key: "agency43", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy
      ///
      /// Locales: en, zh-Hans
      static let recharge23 = Rswift.StringResource(key: "recharge23", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy link
      ///
      /// Locales: en, zh-Hans
      static let agency57 = Rswift.StringResource(key: "agency57", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy successfully
      ///
      /// Locales: en, zh-Hans
      static let new8 = Rswift.StringResource(key: "new8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy the link to access the personal back office and learn more about the business. We recommend to use a PC to open it
      ///
      /// Locales: en, zh-Hans
      static let agency42 = Rswift.StringResource(key: "agency42", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Correct your password
      ///
      /// Locales: en, zh-Hans
      static let login25 = Rswift.StringResource(key: "login25", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cost
      ///
      /// Locales: en, zh-Hans
      static let agency62 = Rswift.StringResource(key: "agency62", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Credit history
      ///
      /// Locales: en, zh-Hans
      static let vip13 = Rswift.StringResource(key: "vip13", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Current VIP level
      ///
      /// Locales: en, zh-Hans
      static let vip1 = Rswift.StringResource(key: "vip1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Current credits
      ///
      /// Locales: en, zh-Hans
      static let vip5 = Rswift.StringResource(key: "vip5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Data error
      ///
      /// Locales: en, zh-Hans
      static let txt4 = Rswift.StringResource(key: "txt4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Data for the last 7 days
      ///
      /// Locales: en, zh-Hans
      static let agency27 = Rswift.StringResource(key: "agency27", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Data for yesterday
      ///
      /// Locales: en, zh-Hans
      static let agency23 = Rswift.StringResource(key: "agency23", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: en, zh-Hans
      static let account23 = Rswift.StringResource(key: "account23", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: en, zh-Hans
      static let finance12 = Rswift.StringResource(key: "finance12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: en, zh-Hans
      static let recharge14 = Rswift.StringResource(key: "recharge14", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: en, zh-Hans
      static let vip17 = Rswift.StringResource(key: "vip17", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: en, zh-Hans
      static let withdraw16 = Rswift.StringResource(key: "withdraw16", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Debit card
      ///
      /// Locales: en, zh-Hans
      static let recharge4 = Rswift.StringResource(key: "recharge4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Delete all
      ///
      /// Locales: en, zh-Hans
      static let accountDiscount5 = Rswift.StringResource(key: "accountDiscount5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Delete operation succeeded
      ///
      /// Locales: en, zh-Hans
      static let new12 = Rswift.StringResource(key: "new12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deposit
      ///
      /// Locales: en, zh-Hans
      static let account4 = Rswift.StringResource(key: "account4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deposit
      ///
      /// Locales: en, zh-Hans
      static let finance15 = Rswift.StringResource(key: "finance15", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deposit
      ///
      /// Locales: en, zh-Hans
      static let footer2 = Rswift.StringResource(key: "footer2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deposit
      ///
      /// Locales: en, zh-Hans
      static let type2Txt6 = Rswift.StringResource(key: "type2Txt6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deposit help
      ///
      /// Locales: en, zh-Hans
      static let help0 = Rswift.StringResource(key: "help0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deposit limit
      ///
      /// Locales: en, zh-Hans
      static let recharge22 = Rswift.StringResource(key: "recharge22", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deposit records
      ///
      /// Locales: en, zh-Hans
      static let finance14 = Rswift.StringResource(key: "finance14", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deposit records
      ///
      /// Locales: en, zh-Hans
      static let recharge1 = Rswift.StringResource(key: "recharge1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deposit successful
      ///
      /// Locales: en, zh-Hans
      static let recharge44 = Rswift.StringResource(key: "recharge44", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Details
      ///
      /// Locales: en, zh-Hans
      static let accountDiscount1 = Rswift.StringResource(key: "accountDiscount1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Directly under
      ///
      /// Locales: en, zh-Hans
      static let agency10 = Rswift.StringResource(key: "agency10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Download
      ///
      /// Locales: en, zh-Hans
      static let agency44 = Rswift.StringResource(key: "agency44", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Download APP
      ///
      /// Locales: en, zh-Hans
      static let agency58 = Rswift.StringResource(key: "agency58", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Download on your phone
      ///
      /// Locales: en, zh-Hans
      static let account16 = Rswift.StringResource(key: "account16", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: End
      ///
      /// Locales: en, zh-Hans
      static let account18 = Rswift.StringResource(key: "account18", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: End
      ///
      /// Locales: en, zh-Hans
      static let recharge8 = Rswift.StringResource(key: "recharge8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: End date
      ///
      /// Locales: en, zh-Hans
      static let new5 = Rswift.StringResource(key: "new5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: End,
      ///
      /// Locales: en, zh-Hans
      static let finance1 = Rswift.StringResource(key: "finance1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enter a new password
      ///
      /// Locales: en, zh-Hans
      static let login23 = Rswift.StringResource(key: "login23", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Exclusive benefits
      ///
      /// Locales: en, zh-Hans
      static let vip7 = Rswift.StringResource(key: "vip7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Expand
      ///
      /// Locales: en, zh-Hans
      static let agency33 = Rswift.StringResource(key: "agency33", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: FAQ
      ///
      /// Locales: en, zh-Hans
      static let help2 = Rswift.StringResource(key: "help2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Fee
      ///
      /// Locales: en, zh-Hans
      static let recharge17 = Rswift.StringResource(key: "recharge17", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Financial records
      ///
      /// Locales: en, zh-Hans
      static let account13 = Rswift.StringResource(key: "account13", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Finish
      ///
      /// Locales: en, zh-Hans
      static let finance9 = Rswift.StringResource(key: "finance9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Free bonus
      ///
      /// Locales: en, zh-Hans
      static let vip8 = Rswift.StringResource(key: "vip8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: GCAS H5
      ///
      /// Locales: en, zh-Hans
      static let recharge43 = Rswift.StringResource(key: "recharge43", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: GCASH
      ///
      /// Locales: en, zh-Hans
      static let recharge3 = Rswift.StringResource(key: "recharge3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: GCash H5
      ///
      /// Locales: en, zh-Hans
      static let withdraw18 = Rswift.StringResource(key: "withdraw18", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Game
      ///
      /// Locales: en, zh-Hans
      static let finance13 = Rswift.StringResource(key: "finance13", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Game Category
      ///
      /// Locales: en, zh-Hans
      static let agency47 = Rswift.StringResource(key: "agency47", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Game records
      ///
      /// Locales: en, zh-Hans
      static let account14 = Rswift.StringResource(key: "account14", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Game rules
      ///
      /// Locales: en, zh-Hans
      static let home11 = Rswift.StringResource(key: "home11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gold Coins
      ///
      /// Locales: en, zh-Hans
      static let lotteryTxt6 = Rswift.StringResource(key: "lotteryTxt6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Hello
      ///
      /// Locales: en, zh-Hans
      static let account0 = Rswift.StringResource(key: "account0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: en, zh-Hans
      static let home9 = Rswift.StringResource(key: "home9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Help Center
      ///
      /// Locales: en, zh-Hans
      static let account15 = Rswift.StringResource(key: "account15", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Highest odds
      ///
      /// Locales: en, zh-Hans
      static let home7 = Rswift.StringResource(key: "home7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, zh-Hans
      static let footer0 = Rswift.StringResource(key: "footer0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I am of legal gaming age and agree to all terms
      ///
      /// Locales: en, zh-Hans
      static let login15 = Rswift.StringResource(key: "login15", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I forgot my account
      ///
      /// Locales: en, zh-Hans
      static let login29 = Rswift.StringResource(key: "login29", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I forgot my password
      ///
      /// Locales: en, zh-Hans
      static let login30 = Rswift.StringResource(key: "login30", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: In development...
      ///
      /// Locales: en, zh-Hans
      static let agency60 = Rswift.StringResource(key: "agency60", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Instagram is not installed
      ///
      /// Locales: en, zh-Hans
      static let new18 = Rswift.StringResource(key: "new18", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Insufficient balance!
      ///
      /// Locales: en, zh-Hans
      static let errorTxt10 = Rswift.StringResource(key: "errorTxt10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Issuing bank
      ///
      /// Locales: en, zh-Hans
      static let card7 = Rswift.StringResource(key: "card7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Issuing city
      ///
      /// Locales: en, zh-Hans
      static let card12 = Rswift.StringResource(key: "card12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Issuing province
      ///
      /// Locales: en, zh-Hans
      static let card11 = Rswift.StringResource(key: "card11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Latest message
      ///
      /// Locales: en, zh-Hans
      static let accountDiscount2 = Rswift.StringResource(key: "accountDiscount2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Level
      ///
      /// Locales: en, zh-Hans
      static let vip11 = Rswift.StringResource(key: "vip11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Line is not installed
      ///
      /// Locales: en, zh-Hans
      static let new15 = Rswift.StringResource(key: "new15", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Link a bank card
      ///
      /// Locales: en, zh-Hans
      static let card6 = Rswift.StringResource(key: "card6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Live data
      ///
      /// Locales: en, zh-Hans
      static let agency12 = Rswift.StringResource(key: "agency12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Local bank
      ///
      /// Locales: en, zh-Hans
      static let recharge24 = Rswift.StringResource(key: "recharge24", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Local bank
      ///
      /// Locales: en, zh-Hans
      static let recharge5 = Rswift.StringResource(key: "recharge5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Log in
      ///
      /// Locales: en, zh-Hans
      static let home0 = Rswift.StringResource(key: "home0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Log in
      ///
      /// Locales: en, zh-Hans
      static let login0 = Rswift.StringResource(key: "login0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Log out
      ///
      /// Locales: en, zh-Hans
      static let account1 = Rswift.StringResource(key: "account1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Log out
      ///
      /// Locales: en, zh-Hans
      static let home2 = Rswift.StringResource(key: "home2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login password
      ///
      /// Locales: en, zh-Hans
      static let new_psd0 = Rswift.StringResource(key: "new_psd0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Lookup
      ///
      /// Locales: en, zh-Hans
      static let account19 = Rswift.StringResource(key: "account19", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Lookup
      ///
      /// Locales: en, zh-Hans
      static let finance6 = Rswift.StringResource(key: "finance6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Lookup
      ///
      /// Locales: en, zh-Hans
      static let recharge9 = Rswift.StringResource(key: "recharge9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Lookup
      ///
      /// Locales: en, zh-Hans
      static let text6 = Rswift.StringResource(key: "text6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Lookup
      ///
      /// Locales: en, zh-Hans
      static let vip16 = Rswift.StringResource(key: "vip16", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Lookup business details
      ///
      /// Locales: en, zh-Hans
      static let agency2 = Rswift.StringResource(key: "agency2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Lottery betting
      ///
      /// Locales: en, zh-Hans
      static let type2Txt2 = Rswift.StringResource(key: "type2Txt2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Lottery payout
      ///
      /// Locales: en, zh-Hans
      static let type2Txt3 = Rswift.StringResource(key: "type2Txt3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Lucky draw result
      ///
      /// Locales: en, zh-Hans
      static let new21 = Rswift.StringResource(key: "new21", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Lucky spin
      ///
      /// Locales: en, zh-Hans
      static let lotteryTit = Rswift.StringResource(key: "lotteryTit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Mark all as read
      ///
      /// Locales: en, zh-Hans
      static let accountDiscount4 = Rswift.StringResource(key: "accountDiscount4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Maximum withdrawal amount
      ///
      /// Locales: en, zh-Hans
      static let new19 = Rswift.StringResource(key: "new19", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Member
      ///
      /// Locales: en, zh-Hans
      static let agency9 = Rswift.StringResource(key: "agency9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Member account
      ///
      /// Locales: en, zh-Hans
      static let massage0 = Rswift.StringResource(key: "massage0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Member deposit
      ///
      /// Locales: en, zh-Hans
      static let recharge0 = Rswift.StringResource(key: "recharge0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Member withdrawal
      ///
      /// Locales: en, zh-Hans
      static let withdraw0 = Rswift.StringResource(key: "withdraw0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Messenger is not installed
      ///
      /// Locales: en, zh-Hans
      static let new17 = Rswift.StringResource(key: "new17", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Methods
      ///
      /// Locales: en, zh-Hans
      static let recharge46 = Rswift.StringResource(key: "recharge46", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Mobile friends
      ///
      /// Locales: en, zh-Hans
      static let home6 = Rswift.StringResource(key: "home6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Monthly bonus
      ///
      /// Locales: en, zh-Hans
      static let vip10 = Rswift.StringResource(key: "vip10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Monthly gift
      ///
      /// Locales: en, zh-Hans
      static let vip24 = Rswift.StringResource(key: "vip24", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Monthly report query
      ///
      /// Locales: en, zh-Hans
      static let agency30 = Rswift.StringResource(key: "agency30", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: More credits needed:
      ///
      /// Locales: en, zh-Hans
      static let vip6 = Rswift.StringResource(key: "vip6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: More popular games
      ///
      /// Locales: en, zh-Hans
      static let game2 = Rswift.StringResource(key: "game2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Multi-currency
      ///
      /// Locales: en, zh-Hans
      static let home13 = Rswift.StringResource(key: "home13", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Must be a combination of 6 to 16 letters and numbers
      ///
      /// Locales: en, zh-Hans
      static let new3 = Rswift.StringResource(key: "new3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Must be a combination of 8 to 20 letters and numbers
      ///
      /// Locales: en, zh-Hans
      static let vip21 = Rswift.StringResource(key: "vip21", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Must be the same city where you apply for the card
      ///
      /// Locales: en, zh-Hans
      static let card16 = Rswift.StringResource(key: "card16", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Must be the same province where you apply for the card
      ///
      /// Locales: en, zh-Hans
      static let card15 = Rswift.StringResource(key: "card15", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Must be your issuing bank branch
      ///
      /// Locales: en, zh-Hans
      static let card13 = Rswift.StringResource(key: "card13", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Must enter 6 to 22 numbers
      ///
      /// Locales: en, zh-Hans
      static let card14 = Rswift.StringResource(key: "card14", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My cash flow
      ///
      /// Locales: en, zh-Hans
      static let agency52 = Rswift.StringResource(key: "agency52", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, zh-Hans
      static let recharge30 = Rswift.StringResource(key: "recharge30", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Net profit
      ///
      /// Locales: en, zh-Hans
      static let agency26 = Rswift.StringResource(key: "agency26", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Net profit
      ///
      /// Locales: en, zh-Hans
      static let agency32 = Rswift.StringResource(key: "agency32", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network error. Please check your network
      ///
      /// Locales: en, zh-Hans
      static let txt1 = Rswift.StringResource(key: "txt1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: New login password
      ///
      /// Locales: en, zh-Hans
      static let login22 = Rswift.StringResource(key: "login22", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: New password
      ///
      /// Locales: en, zh-Hans
      static let new_psd2 = Rswift.StringResource(key: "new_psd2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: New per capita deposit
      ///
      /// Locales: en, zh-Hans
      static let agency19 = Rswift.StringResource(key: "agency19", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No application required
      ///
      /// Locales: en, zh-Hans
      static let discount2 = Rswift.StringResource(key: "discount2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No beneficiary bank card
      ///
      /// Locales: en, zh-Hans
      static let errorTxt11 = Rswift.StringResource(key: "errorTxt11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No data found
      ///
      /// Locales: en, zh-Hans
      static let game1 = Rswift.StringResource(key: "game1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No fee
      ///
      /// Locales: en, zh-Hans
      static let recharge18 = Rswift.StringResource(key: "recharge18", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No message
      ///
      /// Locales: en, zh-Hans
      static let accountDiscount6 = Rswift.StringResource(key: "accountDiscount6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No more
      ///
      /// Locales: en, zh-Hans
      static let noMore = Rswift.StringResource(key: "noMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No more
      ///
      /// Locales: en, zh-Hans
      static let recharge11 = Rswift.StringResource(key: "recharge11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No offer available
      ///
      /// Locales: en, zh-Hans
      static let accountDiscount0 = Rswift.StringResource(key: "accountDiscount0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static let discount6 = Rswift.StringResource(key: "discount6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static let errorTxt1 = Rswift.StringResource(key: "errorTxt1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static let noData = Rswift.StringResource(key: "noData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static let notice1 = Rswift.StringResource(key: "notice1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static let recharge45 = Rswift.StringResource(key: "recharge45", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static let vip19 = Rswift.StringResource(key: "vip19", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Not filled yet
      ///
      /// Locales: en, zh-Hans
      static let massage5 = Rswift.StringResource(key: "massage5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Not winning
      ///
      /// Locales: en, zh-Hans
      static let lotteryTxt9 = Rswift.StringResource(key: "lotteryTxt9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Notification
      ///
      /// Locales: en, zh-Hans
      static let card17 = Rswift.StringResource(key: "card17", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Number of spin remaining
      ///
      /// Locales: en, zh-Hans
      static let lotteryTxt2 = Rswift.StringResource(key: "lotteryTxt2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, zh-Hans
      static let card20 = Rswift.StringResource(key: "card20", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, zh-Hans
      static let text4 = Rswift.StringResource(key: "text4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, zh-Hans
      static let withdraw5 = Rswift.StringResource(key: "withdraw5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Offer
      ///
      /// Locales: en, zh-Hans
      static let footer1 = Rswift.StringResource(key: "footer1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Offer information
      ///
      /// Locales: en, zh-Hans
      static let account11 = Rswift.StringResource(key: "account11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Offer rebate
      ///
      /// Locales: en, zh-Hans
      static let type2Txt10 = Rswift.StringResource(key: "type2Txt10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Offline deposit
      ///
      /// Locales: en, zh-Hans
      static let recharge6 = Rswift.StringResource(key: "recharge6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Old password
      ///
      /// Locales: en, zh-Hans
      static let new_psd1 = Rswift.StringResource(key: "new_psd1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: One-click refresh successful
      ///
      /// Locales: en, zh-Hans
      static let account24 = Rswift.StringResource(key: "account24", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: One-click sharing
      ///
      /// Locales: en, zh-Hans
      static let agency49 = Rswift.StringResource(key: "agency49", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: One-click transfer back
      ///
      /// Locales: en, zh-Hans
      static let wallet0 = Rswift.StringResource(key: "wallet0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Online deposit by debit card
      ///
      /// Locales: en, zh-Hans
      static let recharge16 = Rswift.StringResource(key: "recharge16", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Order number
      ///
      /// Locales: en, zh-Hans
      static let account20 = Rswift.StringResource(key: "account20", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Order number
      ///
      /// Locales: en, zh-Hans
      static let recharge12 = Rswift.StringResource(key: "recharge12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Other costs include: bonus, service fees, revenue, deposit etc.
      ///
      /// Locales: en, zh-Hans
      static let new1 = Rswift.StringResource(key: "new1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Others
      ///
      /// Locales: en, zh-Hans
      static let help5 = Rswift.StringResource(key: "help5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Out of service
      ///
      /// Locales: en, zh-Hans
      static let txt3 = Rswift.StringResource(key: "txt3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: PHP
      ///
      /// Locales: en, zh-Hans
      static let account3 = Rswift.StringResource(key: "account3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, zh-Hans
      static let login3 = Rswift.StringResource(key: "login3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password changed successfully; please log in again
      ///
      /// Locales: en, zh-Hans
      static let new_psd8 = Rswift.StringResource(key: "new_psd8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pay
      ///
      /// Locales: en, zh-Hans
      static let recharge21 = Rswift.StringResource(key: "recharge21", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Payment method
      ///
      /// Locales: en, zh-Hans
      static let recharge15 = Rswift.StringResource(key: "recharge15", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Payment tutorial
      ///
      /// Locales: en, zh-Hans
      static let recharge36 = Rswift.StringResource(key: "recharge36", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Percentage
      ///
      /// Locales: en, zh-Hans
      static let agency25 = Rswift.StringResource(key: "agency25", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Personal back office
      ///
      /// Locales: en, zh-Hans
      static let agency41 = Rswift.StringResource(key: "agency41", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, zh-Hans
      static let login10 = Rswift.StringResource(key: "login10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, zh-Hans
      static let massage2 = Rswift.StringResource(key: "massage2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Phone verification code
      ///
      /// Locales: en, zh-Hans
      static let login13 = Rswift.StringResource(key: "login13", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Platform announcement
      ///
      /// Locales: en, zh-Hans
      static let text0 = Rswift.StringResource(key: "text0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please add a bank card!
      ///
      /// Locales: en, zh-Hans
      static let errorTxt8 = Rswift.StringResource(key: "errorTxt8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please add your card details first
      ///
      /// Locales: en, zh-Hans
      static let card4 = Rswift.StringResource(key: "card4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please agree to the terms
      ///
      /// Locales: en, zh-Hans
      static let login17 = Rswift.StringResource(key: "login17", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter the correct amount
      ///
      /// Locales: en, zh-Hans
      static let new9 = Rswift.StringResource(key: "new9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter the deposit amount!
      ///
      /// Locales: en, zh-Hans
      static let errorTxt9 = Rswift.StringResource(key: "errorTxt9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter verification code
      ///
      /// Locales: en, zh-Hans
      static let login21 = Rswift.StringResource(key: "login21", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter your account
      ///
      /// Locales: en, zh-Hans
      static let login4 = Rswift.StringResource(key: "login4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter your new password
      ///
      /// Locales: en, zh-Hans
      static let new_psd6 = Rswift.StringResource(key: "new_psd6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter your old password
      ///
      /// Locales: en, zh-Hans
      static let new_psd5 = Rswift.StringResource(key: "new_psd5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter your password
      ///
      /// Locales: en, zh-Hans
      static let login5 = Rswift.StringResource(key: "login5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter your phone number
      ///
      /// Locales: en, zh-Hans
      static let errorTxt15 = Rswift.StringResource(key: "errorTxt15", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter your phone number
      ///
      /// Locales: en, zh-Hans
      static let login32 = Rswift.StringResource(key: "login32", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter your registered phone number
      ///
      /// Locales: en, zh-Hans
      static let login18 = Rswift.StringResource(key: "login18", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please select a bank card
      ///
      /// Locales: en, zh-Hans
      static let withdraw8 = Rswift.StringResource(key: "withdraw8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please select a bank name
      ///
      /// Locales: en, zh-Hans
      static let errorTxt14 = Rswift.StringResource(key: "errorTxt14", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please select a bank to deposit
      ///
      /// Locales: en, zh-Hans
      static let new10 = Rswift.StringResource(key: "new10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please select a date!
      ///
      /// Locales: en, zh-Hans
      static let errorTxt2 = Rswift.StringResource(key: "errorTxt2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please select a game type!
      ///
      /// Locales: en, zh-Hans
      static let errorTxt5 = Rswift.StringResource(key: "errorTxt5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please select a payment method!
      ///
      /// Locales: en, zh-Hans
      static let errorTxt6 = Rswift.StringResource(key: "errorTxt6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please select the type of your account details!
      ///
      /// Locales: en, zh-Hans
      static let errorTxt3 = Rswift.StringResource(key: "errorTxt3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please select the type of your transaction records!
      ///
      /// Locales: en, zh-Hans
      static let errorTxt4 = Rswift.StringResource(key: "errorTxt4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please use 4-10 letters or numbers and start with a letter
      ///
      /// Locales: en, zh-Hans
      static let login6 = Rswift.StringResource(key: "login6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please use 4-10 letters, numbers or symbols
      ///
      /// Locales: en, zh-Hans
      static let login7 = Rswift.StringResource(key: "login7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please use the bank card account number bound at the time of registration to recharge
      ///
      /// Locales: en, zh-Hans
      static let recharge47 = Rswift.StringResource(key: "recharge47", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please use your real name
      ///
      /// Locales: en, zh-Hans
      static let massage4 = Rswift.StringResource(key: "massage4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Points
      ///
      /// Locales: en, zh-Hans
      static let vip26 = Rswift.StringResource(key: "vip26", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Popular
      ///
      /// Locales: en, zh-Hans
      static let home15 = Rswift.StringResource(key: "home15", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Popular games
      ///
      /// Locales: en, zh-Hans
      static let game3 = Rswift.StringResource(key: "game3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Privacy agreement
      ///
      /// Locales: en, zh-Hans
      static let help4 = Rswift.StringResource(key: "help4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Processing time
      ///
      /// Locales: en, zh-Hans
      static let recharge32 = Rswift.StringResource(key: "recharge32", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en, zh-Hans
      static let account7 = Rswift.StringResource(key: "account7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Profit
      ///
      /// Locales: en, zh-Hans
      static let agency22 = Rswift.StringResource(key: "agency22", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Promotion and distribution
      ///
      /// Locales: en, zh-Hans
      static let account10 = Rswift.StringResource(key: "account10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Promotion and distribution
      ///
      /// Locales: en, zh-Hans
      static let agency0 = Rswift.StringResource(key: "agency0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Promotion details
      ///
      /// Locales: en, zh-Hans
      static let account12 = Rswift.StringResource(key: "account12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Promotion details
      ///
      /// Locales: en, zh-Hans
      static let discount1 = Rswift.StringResource(key: "discount1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Promotion time
      ///
      /// Locales: en, zh-Hans
      static let discount3 = Rswift.StringResource(key: "discount3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Promotions
      ///
      /// Locales: en, zh-Hans
      static let discount0 = Rswift.StringResource(key: "discount0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Re-enter the new password
      ///
      /// Locales: en, zh-Hans
      static let login9 = Rswift.StringResource(key: "login9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Read operation successfully
      ///
      /// Locales: en, zh-Hans
      static let new11 = Rswift.StringResource(key: "new11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Real name
      ///
      /// Locales: en, zh-Hans
      static let massage1 = Rswift.StringResource(key: "massage1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Rebate
      ///
      /// Locales: en, zh-Hans
      static let type2Txt4 = Rswift.StringResource(key: "type2Txt4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Referral Code
      ///
      /// Locales: en, zh-Hans
      static let agency48 = Rswift.StringResource(key: "agency48", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Referral code
      ///
      /// Locales: en, zh-Hans
      static let agency3 = Rswift.StringResource(key: "agency3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Referral code
      ///
      /// Locales: en, zh-Hans
      static let login14 = Rswift.StringResource(key: "login14", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Refreshing...
      ///
      /// Locales: en, zh-Hans
      static let currentTxt = Rswift.StringResource(key: "currentTxt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en, zh-Hans
      static let home1 = Rswift.StringResource(key: "home1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en, zh-Hans
      static let login1 = Rswift.StringResource(key: "login1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Register account
      ///
      /// Locales: en, zh-Hans
      static let login35 = Rswift.StringResource(key: "login35", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Register now
      ///
      /// Locales: en, zh-Hans
      static let login31 = Rswift.StringResource(key: "login31", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Registered user
      ///
      /// Locales: en, zh-Hans
      static let agency14 = Rswift.StringResource(key: "agency14", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Regulations
      ///
      /// Locales: en, zh-Hans
      static let home10 = Rswift.StringResource(key: "home10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Required
      ///
      /// Locales: en, zh-Hans
      static let wallet6 = Rswift.StringResource(key: "wallet6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Required
      ///
      /// Locales: en, zh-Hans
      static let withdraw13 = Rswift.StringResource(key: "withdraw13", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Restore all game credits,
      ///
      /// Locales: en, zh-Hans
      static let wallet1 = Rswift.StringResource(key: "wallet1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Retrieve account
      ///
      /// Locales: en, zh-Hans
      static let login26 = Rswift.StringResource(key: "login26", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Retrieve password
      ///
      /// Locales: en, zh-Hans
      static let login34 = Rswift.StringResource(key: "login34", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Rules
      ///
      /// Locales: en, zh-Hans
      static let lotteryTxt1 = Rswift.StringResource(key: "lotteryTxt1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Rules introduction
      ///
      /// Locales: en, zh-Hans
      static let agency1 = Rswift.StringResource(key: "agency1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Rules introduction
      ///
      /// Locales: en, zh-Hans
      static let agency35 = Rswift.StringResource(key: "agency35", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Safe payment
      ///
      /// Locales: en, zh-Hans
      static let home4 = Rswift.StringResource(key: "home4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, zh-Hans
      static let massage3 = Rswift.StringResource(key: "massage3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Scroll down to load more
      ///
      /// Locales: en, zh-Hans
      static let accountDiscount3 = Rswift.StringResource(key: "accountDiscount3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Scroll down to load more
      ///
      /// Locales: en, zh-Hans
      static let addMore = Rswift.StringResource(key: "addMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Scroll down to refresh...
      ///
      /// Locales: en, zh-Hans
      static let pullTxt = Rswift.StringResource(key: "pullTxt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search games
      ///
      /// Locales: en, zh-Hans
      static let game0 = Rswift.StringResource(key: "game0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Send password set notification
      ///
      /// Locales: en, zh-Hans
      static let login19 = Rswift.StringResource(key: "login19", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Send the verification code
      ///
      /// Locales: en, zh-Hans
      static let login11 = Rswift.StringResource(key: "login11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sending back to main wallet?
      ///
      /// Locales: en, zh-Hans
      static let wallet8 = Rswift.StringResource(key: "wallet8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sent
      ///
      /// Locales: en, zh-Hans
      static let wallet4 = Rswift.StringResource(key: "wallet4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en, zh-Hans
      static let agency4 = Rswift.StringResource(key: "agency4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Share to
      ///
      /// Locales: en, zh-Hans
      static let agency5 = Rswift.StringResource(key: "agency5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Shareholder
      ///
      /// Locales: en, zh-Hans
      static let footer3 = Rswift.StringResource(key: "footer3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Shareholder
      ///
      /// Locales: en, zh-Hans
      static let footer5 = Rswift.StringResource(key: "footer5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Shareholder dividends
      ///
      /// Locales: en, zh-Hans
      static let agency56 = Rswift.StringResource(key: "agency56", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Shares
      ///
      /// Locales: en, zh-Hans
      static let agency55 = Rswift.StringResource(key: "agency55", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, zh-Hans
      static let account17 = Rswift.StringResource(key: "account17", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, zh-Hans
      static let finance0 = Rswift.StringResource(key: "finance0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, zh-Hans
      static let lotteryTxt3 = Rswift.StringResource(key: "lotteryTxt3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, zh-Hans
      static let recharge7 = Rswift.StringResource(key: "recharge7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, zh-Hans
      static let vip20 = Rswift.StringResource(key: "vip20", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Start date
      ///
      /// Locales: en, zh-Hans
      static let new4 = Rswift.StringResource(key: "new4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Statistics
      ///
      /// Locales: en, zh-Hans
      static let home12 = Rswift.StringResource(key: "home12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: en, zh-Hans
      static let finance18 = Rswift.StringResource(key: "finance18", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sub-member
      ///
      /// Locales: en, zh-Hans
      static let agency11 = Rswift.StringResource(key: "agency11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sub-member amount
      ///
      /// Locales: en, zh-Hans
      static let agency16 = Rswift.StringResource(key: "agency16", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sub-member cash flow
      ///
      /// Locales: en, zh-Hans
      static let agency46 = Rswift.StringResource(key: "agency46", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sub-member cash flow
      ///
      /// Locales: en, zh-Hans
      static let agency53 = Rswift.StringResource(key: "agency53", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans
      static let recharge35 = Rswift.StringResource(key: "recharge35", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Successfully saved
      ///
      /// Locales: en, zh-Hans
      static let new7 = Rswift.StringResource(key: "new7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Telegram is not installed
      ///
      /// Locales: en, zh-Hans
      static let new14 = Rswift.StringResource(key: "new14", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The maximum deposit amount is
      ///
      /// Locales: en, zh-Hans
      static let errorTxt17 = Rswift.StringResource(key: "errorTxt17", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The minimum deposit amount is
      ///
      /// Locales: en, zh-Hans
      static let errorTxt7 = Rswift.StringResource(key: "errorTxt7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The minimum withdrawal amount is
      ///
      /// Locales: en, zh-Hans
      static let errorTxt16 = Rswift.StringResource(key: "errorTxt16", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The minimum withdrawal amount is
      ///
      /// Locales: en, zh-Hans
      static let withdraw15 = Rswift.StringResource(key: "withdraw15", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The number of draws has been used up
      ///
      /// Locales: en, zh-Hans
      static let new20 = Rswift.StringResource(key: "new20", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The start time cannot be later than the end time!
      ///
      /// Locales: en, zh-Hans
      static let finance19 = Rswift.StringResource(key: "finance19", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The system is set at default to collect the statistics every 10 minutes. Please refresh in time
      ///
      /// Locales: en, zh-Hans
      static let agency13 = Rswift.StringResource(key: "agency13", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The system will automatically add the credit limit within 1-2 minutes
      ///
      /// Locales: en, zh-Hans
      static let recharge48 = Rswift.StringResource(key: "recharge48", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The two passwords do not match
      ///
      /// Locales: en, zh-Hans
      static let login33 = Rswift.StringResource(key: "login33", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The two passwords you entered do not match
      ///
      /// Locales: en, zh-Hans
      static let new_psd4 = Rswift.StringResource(key: "new_psd4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: This action will transfer all balances back to the main wallet, do you want to continue?
      ///
      /// Locales: en, zh-Hans
      static let withdraw3 = Rswift.StringResource(key: "withdraw3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: To retrieve your account, please click the button below to contact customer support
      ///
      /// Locales: en, zh-Hans
      static let login27 = Rswift.StringResource(key: "login27", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, zh-Hans
      static let agency51 = Rswift.StringResource(key: "agency51", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, zh-Hans
      static let vip18 = Rswift.StringResource(key: "vip18", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, zh-Hans
      static let wallet7 = Rswift.StringResource(key: "wallet7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total amount
      ///
      /// Locales: en, zh-Hans
      static let account2 = Rswift.StringResource(key: "account2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total audit deduction
      ///
      /// Locales: en, zh-Hans
      static let wallet5 = Rswift.StringResource(key: "wallet5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total bet
      ///
      /// Locales: en, zh-Hans
      static let account21 = Rswift.StringResource(key: "account21", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total bet
      ///
      /// Locales: en, zh-Hans
      static let vip23 = Rswift.StringResource(key: "vip23", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total cash flow
      ///
      /// Locales: en, zh-Hans
      static let agency28 = Rswift.StringResource(key: "agency28", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total deposit
      ///
      /// Locales: en, zh-Hans
      static let finance2 = Rswift.StringResource(key: "finance2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total deposit
      ///
      /// Locales: en, zh-Hans
      static let vip22 = Rswift.StringResource(key: "vip22", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total deposit amount
      ///
      /// Locales: en, zh-Hans
      static let agency18 = Rswift.StringResource(key: "agency18", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total number of people who deposit
      ///
      /// Locales: en, zh-Hans
      static let agency17 = Rswift.StringResource(key: "agency17", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total profit
      ///
      /// Locales: en, zh-Hans
      static let agency29 = Rswift.StringResource(key: "agency29", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total wins and losses
      ///
      /// Locales: en, zh-Hans
      static let account22 = Rswift.StringResource(key: "account22", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total withdrawal
      ///
      /// Locales: en, zh-Hans
      static let finance3 = Rswift.StringResource(key: "finance3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction amount
      ///
      /// Locales: en, zh-Hans
      static let recharge31 = Rswift.StringResource(key: "recharge31", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Type
      ///
      /// Locales: en, zh-Hans
      static let finance7 = Rswift.StringResource(key: "finance7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unfortunately, you didn't win
      ///
      /// Locales: en, zh-Hans
      static let lotteryTxt7 = Rswift.StringResource(key: "lotteryTxt7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en, zh-Hans
      static let new_psd7 = Rswift.StringResource(key: "new_psd7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Upgrade
      ///
      /// Locales: en, zh-Hans
      static let vip3 = Rswift.StringResource(key: "vip3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Upgrade gift
      ///
      /// Locales: en, zh-Hans
      static let vip25 = Rswift.StringResource(key: "vip25", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Upgrade or Degrade
      ///
      /// Locales: en, zh-Hans
      static let vip14 = Rswift.StringResource(key: "vip14", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: User agreement
      ///
      /// Locales: en, zh-Hans
      static let help3 = Rswift.StringResource(key: "help3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: User agreement
      ///
      /// Locales: en, zh-Hans
      static let login16 = Rswift.StringResource(key: "login16", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en, zh-Hans
      static let card1 = Rswift.StringResource(key: "card1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en, zh-Hans
      static let depositBank2 = Rswift.StringResource(key: "depositBank2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Username cannot be less than 5 characters
      ///
      /// Locales: en, zh-Hans
      static let errorTxt12 = Rswift.StringResource(key: "errorTxt12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: VIP
      ///
      /// Locales: en, zh-Hans
      static let account8 = Rswift.StringResource(key: "account8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: VIP benefits
      ///
      /// Locales: en, zh-Hans
      static let vip12 = Rswift.StringResource(key: "vip12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: VIP benefits introduction
      ///
      /// Locales: en, zh-Hans
      static let vip2 = Rswift.StringResource(key: "vip2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: VIP records
      ///
      /// Locales: en, zh-Hans
      static let vip0 = Rswift.StringResource(key: "vip0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Valid user
      ///
      /// Locales: en, zh-Hans
      static let agency15 = Rswift.StringResource(key: "agency15", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Verification code
      ///
      /// Locales: en, zh-Hans
      static let login12 = Rswift.StringResource(key: "login12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Viber is not installed
      ///
      /// Locales: en, zh-Hans
      static let new16 = Rswift.StringResource(key: "new16", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: en, zh-Hans
      static let agency8 = Rswift.StringResource(key: "agency8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Watch a video
      ///
      /// Locales: en, zh-Hans
      static let agency40 = Rswift.StringResource(key: "agency40", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Watch the video
      ///
      /// Locales: en, zh-Hans
      static let agency59 = Rswift.StringResource(key: "agency59", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: WhatsApp is not installed
      ///
      /// Locales: en, zh-Hans
      static let new13 = Rswift.StringResource(key: "new13", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Win or lose amount
      ///
      /// Locales: en, zh-Hans
      static let game2Txt1 = Rswift.StringResource(key: "game2Txt1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Winning
      ///
      /// Locales: en, zh-Hans
      static let lotteryTxt4 = Rswift.StringResource(key: "lotteryTxt4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdraw
      ///
      /// Locales: en, zh-Hans
      static let account5 = Rswift.StringResource(key: "account5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdraw
      ///
      /// Locales: en, zh-Hans
      static let finance17 = Rswift.StringResource(key: "finance17", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdraw
      ///
      /// Locales: en, zh-Hans
      static let type2Txt7 = Rswift.StringResource(key: "type2Txt7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdraw
      ///
      /// Locales: en, zh-Hans
      static let withdraw2 = Rswift.StringResource(key: "withdraw2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdrawable amount
      ///
      /// Locales: en, zh-Hans
      static let new6 = Rswift.StringResource(key: "new6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdrawal amount
      ///
      /// Locales: en, zh-Hans
      static let agency20 = Rswift.StringResource(key: "agency20", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdrawal amount
      ///
      /// Locales: en, zh-Hans
      static let withdraw17 = Rswift.StringResource(key: "withdraw17", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdrawal amount
      ///
      /// Locales: en, zh-Hans
      static let withdraw6 = Rswift.StringResource(key: "withdraw6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdrawal disabled
      ///
      /// Locales: en, zh-Hans
      static let type2Txt8 = Rswift.StringResource(key: "type2Txt8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdrawal enabled
      ///
      /// Locales: en, zh-Hans
      static let type2Txt9 = Rswift.StringResource(key: "type2Txt9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdrawal help
      ///
      /// Locales: en, zh-Hans
      static let help1 = Rswift.StringResource(key: "help1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdrawal records
      ///
      /// Locales: en, zh-Hans
      static let withdraw12 = Rswift.StringResource(key: "withdraw12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You are not logged in to your account or your login details have expired; please log in again
      ///
      /// Locales: en, zh-Hans
      static let txt2 = Rswift.StringResource(key: "txt2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You can check the data for last 31 days
      ///
      /// Locales: en, zh-Hans
      static let finance11 = Rswift.StringResource(key: "finance11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You can check the data for last 60 days
      ///
      /// Locales: en, zh-Hans
      static let finance10 = Rswift.StringResource(key: "finance10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You can check the data for last 60 days
      ///
      /// Locales: en, zh-Hans
      static let recharge10 = Rswift.StringResource(key: "recharge10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your bank
      ///
      /// Locales: en, zh-Hans
      static let recharge28 = Rswift.StringResource(key: "recharge28", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your bank account
      ///
      /// Locales: en, zh-Hans
      static let recharge29 = Rswift.StringResource(key: "recharge29", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your cash flow
      ///
      /// Locales: en, zh-Hans
      static let agency45 = Rswift.StringResource(key: "agency45", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: hr.
      ///
      /// Locales: en, zh-Hans
      static let recharge33 = Rswift.StringResource(key: "recharge33", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: min.
      ///
      /// Locales: en, zh-Hans
      static let recharge34 = Rswift.StringResource(key: "recharge34", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: month
      ///
      /// Locales: en, zh-Hans
      static let new23 = Rswift.StringResource(key: "new23", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: other costs
      ///
      /// Locales: en, zh-Hans
      static let new2 = Rswift.StringResource(key: "new2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: registration success
      ///
      /// Locales: en, zh-Hans
      static let new24 = Rswift.StringResource(key: "new24", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: total Costs
      ///
      /// Locales: en, zh-Hans
      static let agency61 = Rswift.StringResource(key: "agency61", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)

      /// en translation: * This action may take a while
      ///
      /// Locales: en, zh-Hans
      static func wallet2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet2"
        }

        return NSLocalizedString("wallet2", bundle: bundle, comment: "")
      }

      /// en translation: 1. Please select the payment method, fill in the amount, and click Submit.
      ///
      /// Locales: en, zh-Hans
      static func recharge37(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge37", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge37"
        }

        return NSLocalizedString("recharge37", bundle: bundle, comment: "")
      }

      /// en translation: 2. Then you will be directed to the third-party payment page. Please follow the procedure to make a deposit within the time limit.
      ///
      /// Locales: en, zh-Hans
      static func recharge38(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge38", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge38"
        }

        return NSLocalizedString("recharge38", bundle: bundle, comment: "")
      }

      /// en translation: 24/7 support
      ///
      /// Locales: en, zh-Hans
      static func home5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home5"
        }

        return NSLocalizedString("home5", bundle: bundle, comment: "")
      }

      /// en translation: 3. After the payment, please do not close the window before it confirms that the payment is completed. Otherwise, missing payment may occur.
      ///
      /// Locales: en, zh-Hans
      static func recharge39(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge39", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge39"
        }

        return NSLocalizedString("recharge39", bundle: bundle, comment: "")
      }

      /// en translation: 4. After receiving the confirmation from the third-party platform, the system will auto-credit the money to your account.
      ///
      /// Locales: en, zh-Hans
      static func recharge40(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge40", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge40"
        }

        return NSLocalizedString("recharge40", bundle: bundle, comment: "")
      }

      /// en translation: 5. What if the payment is not received? Can’t pay? Please contact Online Customer Support for help.
      ///
      /// Locales: en, zh-Hans
      static func recharge41(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge41", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge41"
        }

        return NSLocalizedString("recharge41", bundle: bundle, comment: "")
      }

      /// en translation: About
      ///
      /// Locales: en, zh-Hans
      static func home8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home8"
        }

        return NSLocalizedString("home8", bundle: bundle, comment: "")
      }

      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static func card2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card2"
        }

        return NSLocalizedString("card2", bundle: bundle, comment: "")
      }

      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static func depositBank3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("depositBank3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "depositBank3"
        }

        return NSLocalizedString("depositBank3", bundle: bundle, comment: "")
      }

      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static func footer4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("footer4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "footer4"
        }

        return NSLocalizedString("footer4", bundle: bundle, comment: "")
      }

      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static func login2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login2"
        }

        return NSLocalizedString("login2", bundle: bundle, comment: "")
      }

      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static func recharge27(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge27", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge27"
        }

        return NSLocalizedString("recharge27", bundle: bundle, comment: "")
      }

      /// en translation: Account
      ///
      /// Locales: en, zh-Hans
      static func withdraw11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw11"
        }

        return NSLocalizedString("withdraw11", bundle: bundle, comment: "")
      }

      /// en translation: Account details
      ///
      /// Locales: en, zh-Hans
      static func finance4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance4"
        }

        return NSLocalizedString("finance4", bundle: bundle, comment: "")
      }

      /// en translation: Account name
      ///
      /// Locales: en, zh-Hans
      static func recharge26(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge26", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge26"
        }

        return NSLocalizedString("recharge26", bundle: bundle, comment: "")
      }

      /// en translation: Account name
      ///
      /// Locales: en, zh-Hans
      static func withdraw10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw10"
        }

        return NSLocalizedString("withdraw10", bundle: bundle, comment: "")
      }

      /// en translation: Account number cannot be less than 5 digits
      ///
      /// Locales: en, zh-Hans
      static func errorTxt13(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt13", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt13"
        }

        return NSLocalizedString("errorTxt13", bundle: bundle, comment: "")
      }

      /// en translation: Actual amount / PHP
      ///
      /// Locales: en, zh-Hans
      static func recharge13(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge13", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge13"
        }

        return NSLocalizedString("recharge13", bundle: bundle, comment: "")
      }

      /// en translation: Actual deposit
      ///
      /// Locales: en, zh-Hans
      static func recharge19(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge19", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge19"
        }

        return NSLocalizedString("recharge19", bundle: bundle, comment: "")
      }

      /// en translation: Add a bank card
      ///
      /// Locales: en, zh-Hans
      static func card3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card3"
        }

        return NSLocalizedString("card3", bundle: bundle, comment: "")
      }

      /// en translation: Added!
      ///
      /// Locales: en, zh-Hans
      static func successTxt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("successTxt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "successTxt"
        }

        return NSLocalizedString("successTxt", bundle: bundle, comment: "")
      }

      /// en translation: Agent
      ///
      /// Locales: en, zh-Hans
      static func agency50(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency50", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency50"
        }

        return NSLocalizedString("agency50", bundle: bundle, comment: "")
      }

      /// en translation: All
      ///
      /// Locales: en, zh-Hans
      static func type2Txt1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type2Txt1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type2Txt1"
        }

        return NSLocalizedString("type2Txt1", bundle: bundle, comment: "")
      }

      /// en translation: All wallets
      ///
      /// Locales: en, zh-Hans
      static func account9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account9"
        }

        return NSLocalizedString("account9", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, zh-Hans
      static func finance16(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance16", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance16"
        }

        return NSLocalizedString("finance16", bundle: bundle, comment: "")
      }

      /// en translation: Amount conversion
      ///
      /// Locales: en, zh-Hans
      static func type2Txt11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type2Txt11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type2Txt11"
        }

        return NSLocalizedString("type2Txt11", bundle: bundle, comment: "")
      }

      /// en translation: Amount limit
      ///
      /// Locales: en, zh-Hans
      static func withdraw7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw7"
        }

        return NSLocalizedString("withdraw7", bundle: bundle, comment: "")
      }

      /// en translation: Announcement
      ///
      /// Locales: en, zh-Hans
      static func account6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account6"
        }

        return NSLocalizedString("account6", bundle: bundle, comment: "")
      }

      /// en translation: Announcement Centre
      ///
      /// Locales: en, zh-Hans
      static func notice0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notice0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notice0"
        }

        return NSLocalizedString("notice0", bundle: bundle, comment: "")
      }

      /// en translation: Announcements
      ///
      /// Locales: en, zh-Hans
      static func home14(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home14", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home14"
        }

        return NSLocalizedString("home14", bundle: bundle, comment: "")
      }

      /// en translation: Apply today
      ///
      /// Locales: en, zh-Hans
      static func discount4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discount4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "discount4"
        }

        return NSLocalizedString("discount4", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure to delete the Standard Chartered bank card?
      ///
      /// Locales: en, zh-Hans
      static func text7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("text7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "text7"
        }

        return NSLocalizedString("text7", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete this card? 
      ///
      /// Locales: en, zh-Hans
      static func card18(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card18", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card18"
        }

        return NSLocalizedString("card18", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, zh-Hans
      static func login20(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login20", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login20"
        }

        return NSLocalizedString("login20", bundle: bundle, comment: "")
      }

      /// en translation: Balance
      ///
      /// Locales: en, zh-Hans
      static func agency7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency7"
        }

        return NSLocalizedString("agency7", bundle: bundle, comment: "")
      }

      /// en translation: Balance
      ///
      /// Locales: en, zh-Hans
      static func recharge2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge2"
        }

        return NSLocalizedString("recharge2", bundle: bundle, comment: "")
      }

      /// en translation: Balance
      ///
      /// Locales: en, zh-Hans
      static func withdraw1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw1"
        }

        return NSLocalizedString("withdraw1", bundle: bundle, comment: "")
      }

      /// en translation: Bank
      ///
      /// Locales: en, zh-Hans
      static func card0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card0"
        }

        return NSLocalizedString("card0", bundle: bundle, comment: "")
      }

      /// en translation: Bank
      ///
      /// Locales: en, zh-Hans
      static func depositBank1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("depositBank1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "depositBank1"
        }

        return NSLocalizedString("depositBank1", bundle: bundle, comment: "")
      }

      /// en translation: Bank
      ///
      /// Locales: en, zh-Hans
      static func recharge25(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge25", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge25"
        }

        return NSLocalizedString("recharge25", bundle: bundle, comment: "")
      }

      /// en translation: Bank
      ///
      /// Locales: en, zh-Hans
      static func withdraw9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw9"
        }

        return NSLocalizedString("withdraw9", bundle: bundle, comment: "")
      }

      /// en translation: Bank account number
      ///
      /// Locales: en, zh-Hans
      static func card10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card10"
        }

        return NSLocalizedString("card10", bundle: bundle, comment: "")
      }

      /// en translation: Bank card management
      ///
      /// Locales: en, zh-Hans
      static func account9Txt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account9Txt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account9Txt"
        }

        return NSLocalizedString("account9Txt", bundle: bundle, comment: "")
      }

      /// en translation: Bank card management
      ///
      /// Locales: en, zh-Hans
      static func card5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card5"
        }

        return NSLocalizedString("card5", bundle: bundle, comment: "")
      }

      /// en translation: Bank name
      ///
      /// Locales: en, zh-Hans
      static func card8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card8"
        }

        return NSLocalizedString("card8", bundle: bundle, comment: "")
      }

      /// en translation: Beneficiary bank
      ///
      /// Locales: en, zh-Hans
      static func recharge20(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge20", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge20"
        }

        return NSLocalizedString("recharge20", bundle: bundle, comment: "")
      }

      /// en translation: Bet amount
      ///
      /// Locales: en, zh-Hans
      static func game2Txt0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("game2Txt0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "game2Txt0"
        }

        return NSLocalizedString("game2Txt0", bundle: bundle, comment: "")
      }

      /// en translation: Big Win
      ///
      /// Locales: en, zh-Hans
      static func lotteryTxt8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lotteryTxt8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lotteryTxt8"
        }

        return NSLocalizedString("lotteryTxt8", bundle: bundle, comment: "")
      }

      /// en translation: Bonus
      ///
      /// Locales: en, zh-Hans
      static func new22(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new22", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new22"
        }

        return NSLocalizedString("new22", bundle: bundle, comment: "")
      }

      /// en translation: Bonus records
      ///
      /// Locales: en, zh-Hans
      static func finance5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance5"
        }

        return NSLocalizedString("finance5", bundle: bundle, comment: "")
      }

      /// en translation: Branch name
      ///
      /// Locales: en, zh-Hans
      static func card9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card9"
        }

        return NSLocalizedString("card9", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static func agency6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency6"
        }

        return NSLocalizedString("agency6", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static func card19(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card19", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card19"
        }

        return NSLocalizedString("card19", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static func finance8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance8"
        }

        return NSLocalizedString("finance8", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static func text2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("text2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "text2"
        }

        return NSLocalizedString("text2", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static func wallet3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet3"
        }

        return NSLocalizedString("wallet3", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static func withdraw4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw4"
        }

        return NSLocalizedString("withdraw4", bundle: bundle, comment: "")
      }

      /// en translation: Cancellation
      ///
      /// Locales: en, zh-Hans
      static func type2Txt5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type2Txt5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type2Txt5"
        }

        return NSLocalizedString("type2Txt5", bundle: bundle, comment: "")
      }

      /// en translation: Card transfer bonus
      ///
      /// Locales: en, zh-Hans
      static func vip9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip9"
        }

        return NSLocalizedString("vip9", bundle: bundle, comment: "")
      }

      /// en translation: Cash flow
      ///
      /// Locales: en, zh-Hans
      static func agency21(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency21", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency21"
        }

        return NSLocalizedString("agency21", bundle: bundle, comment: "")
      }

      /// en translation: Cash flow
      ///
      /// Locales: en, zh-Hans
      static func agency24(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency24", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency24"
        }

        return NSLocalizedString("agency24", bundle: bundle, comment: "")
      }

      /// en translation: Cash flow
      ///
      /// Locales: en, zh-Hans
      static func agency54(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency54", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency54"
        }

        return NSLocalizedString("agency54", bundle: bundle, comment: "")
      }

      /// en translation: Cash flow amount
      ///
      /// Locales: en, zh-Hans
      static func agency31(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency31", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency31"
        }

        return NSLocalizedString("agency31", bundle: bundle, comment: "")
      }

      /// en translation: Claim records
      ///
      /// Locales: en, zh-Hans
      static func vip15(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip15", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip15"
        }

        return NSLocalizedString("vip15", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, zh-Hans
      static func text1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("text1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "text1"
        }

        return NSLocalizedString("text1", bundle: bundle, comment: "")
      }

      /// en translation: Collapse
      ///
      /// Locales: en, zh-Hans
      static func agency34(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency34", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency34"
        }

        return NSLocalizedString("agency34", bundle: bundle, comment: "")
      }

      /// en translation: Conditions
      ///
      /// Locales: en, zh-Hans
      static func vip4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip4"
        }

        return NSLocalizedString("vip4", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, zh-Hans
      static func lotteryTxt10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lotteryTxt10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lotteryTxt10"
        }

        return NSLocalizedString("lotteryTxt10", bundle: bundle, comment: "")
      }

      /// en translation: Confirm password
      ///
      /// Locales: en, zh-Hans
      static func login8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login8"
        }

        return NSLocalizedString("login8", bundle: bundle, comment: "")
      }

      /// en translation: Confirm password
      ///
      /// Locales: en, zh-Hans
      static func new_psd3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_psd3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_psd3"
        }

        return NSLocalizedString("new_psd3", bundle: bundle, comment: "")
      }

      /// en translation: Confirm the new password
      ///
      /// Locales: en, zh-Hans
      static func login24(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login24", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login24"
        }

        return NSLocalizedString("login24", bundle: bundle, comment: "")
      }

      /// en translation: Congratulations on getting
      ///
      /// Locales: en, zh-Hans
      static func lotteryTxt5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lotteryTxt5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lotteryTxt5"
        }

        return NSLocalizedString("lotteryTxt5", bundle: bundle, comment: "")
      }

      /// en translation: Contact customer support
      ///
      /// Locales: en, zh-Hans
      static func discount5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discount5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "discount5"
        }

        return NSLocalizedString("discount5", bundle: bundle, comment: "")
      }

      /// en translation: Contact customer support
      ///
      /// Locales: en, zh-Hans
      static func login28(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login28", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login28"
        }

        return NSLocalizedString("login28", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, zh-Hans
      static func text5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("text5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "text5"
        }

        return NSLocalizedString("text5", bundle: bundle, comment: "")
      }

      /// en translation: Copy
      ///
      /// Locales: en, zh-Hans
      static func agency43(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency43", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency43"
        }

        return NSLocalizedString("agency43", bundle: bundle, comment: "")
      }

      /// en translation: Copy
      ///
      /// Locales: en, zh-Hans
      static func recharge23(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge23", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge23"
        }

        return NSLocalizedString("recharge23", bundle: bundle, comment: "")
      }

      /// en translation: Copy link
      ///
      /// Locales: en, zh-Hans
      static func agency57(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency57", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency57"
        }

        return NSLocalizedString("agency57", bundle: bundle, comment: "")
      }

      /// en translation: Copy successfully
      ///
      /// Locales: en, zh-Hans
      static func new8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new8"
        }

        return NSLocalizedString("new8", bundle: bundle, comment: "")
      }

      /// en translation: Copy the link to access the personal back office and learn more about the business. We recommend to use a PC to open it
      ///
      /// Locales: en, zh-Hans
      static func agency42(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency42", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency42"
        }

        return NSLocalizedString("agency42", bundle: bundle, comment: "")
      }

      /// en translation: Correct your password
      ///
      /// Locales: en, zh-Hans
      static func login25(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login25", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login25"
        }

        return NSLocalizedString("login25", bundle: bundle, comment: "")
      }

      /// en translation: Cost
      ///
      /// Locales: en, zh-Hans
      static func agency62(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency62", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency62"
        }

        return NSLocalizedString("agency62", bundle: bundle, comment: "")
      }

      /// en translation: Credit history
      ///
      /// Locales: en, zh-Hans
      static func vip13(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip13", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip13"
        }

        return NSLocalizedString("vip13", bundle: bundle, comment: "")
      }

      /// en translation: Current VIP level
      ///
      /// Locales: en, zh-Hans
      static func vip1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip1"
        }

        return NSLocalizedString("vip1", bundle: bundle, comment: "")
      }

      /// en translation: Current credits
      ///
      /// Locales: en, zh-Hans
      static func vip5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip5"
        }

        return NSLocalizedString("vip5", bundle: bundle, comment: "")
      }

      /// en translation: Data error
      ///
      /// Locales: en, zh-Hans
      static func txt4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt4"
        }

        return NSLocalizedString("txt4", bundle: bundle, comment: "")
      }

      /// en translation: Data for the last 7 days
      ///
      /// Locales: en, zh-Hans
      static func agency27(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency27", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency27"
        }

        return NSLocalizedString("agency27", bundle: bundle, comment: "")
      }

      /// en translation: Data for yesterday
      ///
      /// Locales: en, zh-Hans
      static func agency23(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency23", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency23"
        }

        return NSLocalizedString("agency23", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: en, zh-Hans
      static func account23(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account23", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account23"
        }

        return NSLocalizedString("account23", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: en, zh-Hans
      static func finance12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance12"
        }

        return NSLocalizedString("finance12", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: en, zh-Hans
      static func recharge14(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge14", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge14"
        }

        return NSLocalizedString("recharge14", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: en, zh-Hans
      static func vip17(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip17", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip17"
        }

        return NSLocalizedString("vip17", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: en, zh-Hans
      static func withdraw16(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw16", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw16"
        }

        return NSLocalizedString("withdraw16", bundle: bundle, comment: "")
      }

      /// en translation: Debit card
      ///
      /// Locales: en, zh-Hans
      static func recharge4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge4"
        }

        return NSLocalizedString("recharge4", bundle: bundle, comment: "")
      }

      /// en translation: Delete all
      ///
      /// Locales: en, zh-Hans
      static func accountDiscount5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accountDiscount5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accountDiscount5"
        }

        return NSLocalizedString("accountDiscount5", bundle: bundle, comment: "")
      }

      /// en translation: Delete operation succeeded
      ///
      /// Locales: en, zh-Hans
      static func new12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new12"
        }

        return NSLocalizedString("new12", bundle: bundle, comment: "")
      }

      /// en translation: Deposit
      ///
      /// Locales: en, zh-Hans
      static func account4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account4"
        }

        return NSLocalizedString("account4", bundle: bundle, comment: "")
      }

      /// en translation: Deposit
      ///
      /// Locales: en, zh-Hans
      static func finance15(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance15", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance15"
        }

        return NSLocalizedString("finance15", bundle: bundle, comment: "")
      }

      /// en translation: Deposit
      ///
      /// Locales: en, zh-Hans
      static func footer2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("footer2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "footer2"
        }

        return NSLocalizedString("footer2", bundle: bundle, comment: "")
      }

      /// en translation: Deposit
      ///
      /// Locales: en, zh-Hans
      static func type2Txt6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type2Txt6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type2Txt6"
        }

        return NSLocalizedString("type2Txt6", bundle: bundle, comment: "")
      }

      /// en translation: Deposit help
      ///
      /// Locales: en, zh-Hans
      static func help0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help0"
        }

        return NSLocalizedString("help0", bundle: bundle, comment: "")
      }

      /// en translation: Deposit limit
      ///
      /// Locales: en, zh-Hans
      static func recharge22(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge22", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge22"
        }

        return NSLocalizedString("recharge22", bundle: bundle, comment: "")
      }

      /// en translation: Deposit records
      ///
      /// Locales: en, zh-Hans
      static func finance14(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance14", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance14"
        }

        return NSLocalizedString("finance14", bundle: bundle, comment: "")
      }

      /// en translation: Deposit records
      ///
      /// Locales: en, zh-Hans
      static func recharge1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge1"
        }

        return NSLocalizedString("recharge1", bundle: bundle, comment: "")
      }

      /// en translation: Deposit successful
      ///
      /// Locales: en, zh-Hans
      static func recharge44(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge44", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge44"
        }

        return NSLocalizedString("recharge44", bundle: bundle, comment: "")
      }

      /// en translation: Details
      ///
      /// Locales: en, zh-Hans
      static func accountDiscount1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accountDiscount1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accountDiscount1"
        }

        return NSLocalizedString("accountDiscount1", bundle: bundle, comment: "")
      }

      /// en translation: Directly under
      ///
      /// Locales: en, zh-Hans
      static func agency10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency10"
        }

        return NSLocalizedString("agency10", bundle: bundle, comment: "")
      }

      /// en translation: Download
      ///
      /// Locales: en, zh-Hans
      static func agency44(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency44", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency44"
        }

        return NSLocalizedString("agency44", bundle: bundle, comment: "")
      }

      /// en translation: Download APP
      ///
      /// Locales: en, zh-Hans
      static func agency58(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency58", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency58"
        }

        return NSLocalizedString("agency58", bundle: bundle, comment: "")
      }

      /// en translation: Download on your phone
      ///
      /// Locales: en, zh-Hans
      static func account16(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account16", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account16"
        }

        return NSLocalizedString("account16", bundle: bundle, comment: "")
      }

      /// en translation: End
      ///
      /// Locales: en, zh-Hans
      static func account18(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account18", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account18"
        }

        return NSLocalizedString("account18", bundle: bundle, comment: "")
      }

      /// en translation: End
      ///
      /// Locales: en, zh-Hans
      static func recharge8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge8"
        }

        return NSLocalizedString("recharge8", bundle: bundle, comment: "")
      }

      /// en translation: End date
      ///
      /// Locales: en, zh-Hans
      static func new5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new5"
        }

        return NSLocalizedString("new5", bundle: bundle, comment: "")
      }

      /// en translation: End,
      ///
      /// Locales: en, zh-Hans
      static func finance1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance1"
        }

        return NSLocalizedString("finance1", bundle: bundle, comment: "")
      }

      /// en translation: Enter a new password
      ///
      /// Locales: en, zh-Hans
      static func login23(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login23", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login23"
        }

        return NSLocalizedString("login23", bundle: bundle, comment: "")
      }

      /// en translation: Exclusive benefits
      ///
      /// Locales: en, zh-Hans
      static func vip7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip7"
        }

        return NSLocalizedString("vip7", bundle: bundle, comment: "")
      }

      /// en translation: Expand
      ///
      /// Locales: en, zh-Hans
      static func agency33(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency33", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency33"
        }

        return NSLocalizedString("agency33", bundle: bundle, comment: "")
      }

      /// en translation: FAQ
      ///
      /// Locales: en, zh-Hans
      static func help2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help2"
        }

        return NSLocalizedString("help2", bundle: bundle, comment: "")
      }

      /// en translation: Fee
      ///
      /// Locales: en, zh-Hans
      static func recharge17(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge17", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge17"
        }

        return NSLocalizedString("recharge17", bundle: bundle, comment: "")
      }

      /// en translation: Financial records
      ///
      /// Locales: en, zh-Hans
      static func account13(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account13", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account13"
        }

        return NSLocalizedString("account13", bundle: bundle, comment: "")
      }

      /// en translation: Finish
      ///
      /// Locales: en, zh-Hans
      static func finance9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance9"
        }

        return NSLocalizedString("finance9", bundle: bundle, comment: "")
      }

      /// en translation: Free bonus
      ///
      /// Locales: en, zh-Hans
      static func vip8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip8"
        }

        return NSLocalizedString("vip8", bundle: bundle, comment: "")
      }

      /// en translation: GCAS H5
      ///
      /// Locales: en, zh-Hans
      static func recharge43(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge43", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge43"
        }

        return NSLocalizedString("recharge43", bundle: bundle, comment: "")
      }

      /// en translation: GCASH
      ///
      /// Locales: en, zh-Hans
      static func recharge3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge3"
        }

        return NSLocalizedString("recharge3", bundle: bundle, comment: "")
      }

      /// en translation: GCash H5
      ///
      /// Locales: en, zh-Hans
      static func withdraw18(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw18", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw18"
        }

        return NSLocalizedString("withdraw18", bundle: bundle, comment: "")
      }

      /// en translation: Game
      ///
      /// Locales: en, zh-Hans
      static func finance13(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance13", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance13"
        }

        return NSLocalizedString("finance13", bundle: bundle, comment: "")
      }

      /// en translation: Game Category
      ///
      /// Locales: en, zh-Hans
      static func agency47(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency47", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency47"
        }

        return NSLocalizedString("agency47", bundle: bundle, comment: "")
      }

      /// en translation: Game records
      ///
      /// Locales: en, zh-Hans
      static func account14(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account14", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account14"
        }

        return NSLocalizedString("account14", bundle: bundle, comment: "")
      }

      /// en translation: Game rules
      ///
      /// Locales: en, zh-Hans
      static func home11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home11"
        }

        return NSLocalizedString("home11", bundle: bundle, comment: "")
      }

      /// en translation: Gold Coins
      ///
      /// Locales: en, zh-Hans
      static func lotteryTxt6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lotteryTxt6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lotteryTxt6"
        }

        return NSLocalizedString("lotteryTxt6", bundle: bundle, comment: "")
      }

      /// en translation: Hello
      ///
      /// Locales: en, zh-Hans
      static func account0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account0"
        }

        return NSLocalizedString("account0", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: en, zh-Hans
      static func home9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home9"
        }

        return NSLocalizedString("home9", bundle: bundle, comment: "")
      }

      /// en translation: Help Center
      ///
      /// Locales: en, zh-Hans
      static func account15(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account15", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account15"
        }

        return NSLocalizedString("account15", bundle: bundle, comment: "")
      }

      /// en translation: Highest odds
      ///
      /// Locales: en, zh-Hans
      static func home7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home7"
        }

        return NSLocalizedString("home7", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, zh-Hans
      static func footer0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("footer0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "footer0"
        }

        return NSLocalizedString("footer0", bundle: bundle, comment: "")
      }

      /// en translation: I am of legal gaming age and agree to all terms
      ///
      /// Locales: en, zh-Hans
      static func login15(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login15", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login15"
        }

        return NSLocalizedString("login15", bundle: bundle, comment: "")
      }

      /// en translation: I forgot my account
      ///
      /// Locales: en, zh-Hans
      static func login29(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login29", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login29"
        }

        return NSLocalizedString("login29", bundle: bundle, comment: "")
      }

      /// en translation: I forgot my password
      ///
      /// Locales: en, zh-Hans
      static func login30(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login30", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login30"
        }

        return NSLocalizedString("login30", bundle: bundle, comment: "")
      }

      /// en translation: In development...
      ///
      /// Locales: en, zh-Hans
      static func agency60(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency60", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency60"
        }

        return NSLocalizedString("agency60", bundle: bundle, comment: "")
      }

      /// en translation: Instagram is not installed
      ///
      /// Locales: en, zh-Hans
      static func new18(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new18", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new18"
        }

        return NSLocalizedString("new18", bundle: bundle, comment: "")
      }

      /// en translation: Insufficient balance!
      ///
      /// Locales: en, zh-Hans
      static func errorTxt10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt10"
        }

        return NSLocalizedString("errorTxt10", bundle: bundle, comment: "")
      }

      /// en translation: Issuing bank
      ///
      /// Locales: en, zh-Hans
      static func card7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card7"
        }

        return NSLocalizedString("card7", bundle: bundle, comment: "")
      }

      /// en translation: Issuing city
      ///
      /// Locales: en, zh-Hans
      static func card12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card12"
        }

        return NSLocalizedString("card12", bundle: bundle, comment: "")
      }

      /// en translation: Issuing province
      ///
      /// Locales: en, zh-Hans
      static func card11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card11"
        }

        return NSLocalizedString("card11", bundle: bundle, comment: "")
      }

      /// en translation: Latest message
      ///
      /// Locales: en, zh-Hans
      static func accountDiscount2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accountDiscount2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accountDiscount2"
        }

        return NSLocalizedString("accountDiscount2", bundle: bundle, comment: "")
      }

      /// en translation: Level
      ///
      /// Locales: en, zh-Hans
      static func vip11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip11"
        }

        return NSLocalizedString("vip11", bundle: bundle, comment: "")
      }

      /// en translation: Line is not installed
      ///
      /// Locales: en, zh-Hans
      static func new15(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new15", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new15"
        }

        return NSLocalizedString("new15", bundle: bundle, comment: "")
      }

      /// en translation: Link a bank card
      ///
      /// Locales: en, zh-Hans
      static func card6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card6"
        }

        return NSLocalizedString("card6", bundle: bundle, comment: "")
      }

      /// en translation: Live data
      ///
      /// Locales: en, zh-Hans
      static func agency12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency12"
        }

        return NSLocalizedString("agency12", bundle: bundle, comment: "")
      }

      /// en translation: Local bank
      ///
      /// Locales: en, zh-Hans
      static func recharge24(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge24", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge24"
        }

        return NSLocalizedString("recharge24", bundle: bundle, comment: "")
      }

      /// en translation: Local bank
      ///
      /// Locales: en, zh-Hans
      static func recharge5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge5"
        }

        return NSLocalizedString("recharge5", bundle: bundle, comment: "")
      }

      /// en translation: Log in
      ///
      /// Locales: en, zh-Hans
      static func home0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home0"
        }

        return NSLocalizedString("home0", bundle: bundle, comment: "")
      }

      /// en translation: Log in
      ///
      /// Locales: en, zh-Hans
      static func login0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login0"
        }

        return NSLocalizedString("login0", bundle: bundle, comment: "")
      }

      /// en translation: Log out
      ///
      /// Locales: en, zh-Hans
      static func account1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account1"
        }

        return NSLocalizedString("account1", bundle: bundle, comment: "")
      }

      /// en translation: Log out
      ///
      /// Locales: en, zh-Hans
      static func home2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home2"
        }

        return NSLocalizedString("home2", bundle: bundle, comment: "")
      }

      /// en translation: Login password
      ///
      /// Locales: en, zh-Hans
      static func new_psd0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_psd0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_psd0"
        }

        return NSLocalizedString("new_psd0", bundle: bundle, comment: "")
      }

      /// en translation: Lookup
      ///
      /// Locales: en, zh-Hans
      static func account19(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account19", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account19"
        }

        return NSLocalizedString("account19", bundle: bundle, comment: "")
      }

      /// en translation: Lookup
      ///
      /// Locales: en, zh-Hans
      static func finance6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance6"
        }

        return NSLocalizedString("finance6", bundle: bundle, comment: "")
      }

      /// en translation: Lookup
      ///
      /// Locales: en, zh-Hans
      static func recharge9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge9"
        }

        return NSLocalizedString("recharge9", bundle: bundle, comment: "")
      }

      /// en translation: Lookup
      ///
      /// Locales: en, zh-Hans
      static func text6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("text6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "text6"
        }

        return NSLocalizedString("text6", bundle: bundle, comment: "")
      }

      /// en translation: Lookup
      ///
      /// Locales: en, zh-Hans
      static func vip16(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip16", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip16"
        }

        return NSLocalizedString("vip16", bundle: bundle, comment: "")
      }

      /// en translation: Lookup business details
      ///
      /// Locales: en, zh-Hans
      static func agency2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency2"
        }

        return NSLocalizedString("agency2", bundle: bundle, comment: "")
      }

      /// en translation: Lottery betting
      ///
      /// Locales: en, zh-Hans
      static func type2Txt2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type2Txt2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type2Txt2"
        }

        return NSLocalizedString("type2Txt2", bundle: bundle, comment: "")
      }

      /// en translation: Lottery payout
      ///
      /// Locales: en, zh-Hans
      static func type2Txt3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type2Txt3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type2Txt3"
        }

        return NSLocalizedString("type2Txt3", bundle: bundle, comment: "")
      }

      /// en translation: Lucky draw result
      ///
      /// Locales: en, zh-Hans
      static func new21(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new21", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new21"
        }

        return NSLocalizedString("new21", bundle: bundle, comment: "")
      }

      /// en translation: Lucky spin
      ///
      /// Locales: en, zh-Hans
      static func lotteryTit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lotteryTit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lotteryTit"
        }

        return NSLocalizedString("lotteryTit", bundle: bundle, comment: "")
      }

      /// en translation: Mark all as read
      ///
      /// Locales: en, zh-Hans
      static func accountDiscount4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accountDiscount4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accountDiscount4"
        }

        return NSLocalizedString("accountDiscount4", bundle: bundle, comment: "")
      }

      /// en translation: Maximum withdrawal amount
      ///
      /// Locales: en, zh-Hans
      static func new19(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new19", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new19"
        }

        return NSLocalizedString("new19", bundle: bundle, comment: "")
      }

      /// en translation: Member
      ///
      /// Locales: en, zh-Hans
      static func agency9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency9"
        }

        return NSLocalizedString("agency9", bundle: bundle, comment: "")
      }

      /// en translation: Member account
      ///
      /// Locales: en, zh-Hans
      static func massage0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("massage0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "massage0"
        }

        return NSLocalizedString("massage0", bundle: bundle, comment: "")
      }

      /// en translation: Member deposit
      ///
      /// Locales: en, zh-Hans
      static func recharge0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge0"
        }

        return NSLocalizedString("recharge0", bundle: bundle, comment: "")
      }

      /// en translation: Member withdrawal
      ///
      /// Locales: en, zh-Hans
      static func withdraw0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw0"
        }

        return NSLocalizedString("withdraw0", bundle: bundle, comment: "")
      }

      /// en translation: Messenger is not installed
      ///
      /// Locales: en, zh-Hans
      static func new17(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new17", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new17"
        }

        return NSLocalizedString("new17", bundle: bundle, comment: "")
      }

      /// en translation: Methods
      ///
      /// Locales: en, zh-Hans
      static func recharge46(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge46", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge46"
        }

        return NSLocalizedString("recharge46", bundle: bundle, comment: "")
      }

      /// en translation: Mobile friends
      ///
      /// Locales: en, zh-Hans
      static func home6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home6"
        }

        return NSLocalizedString("home6", bundle: bundle, comment: "")
      }

      /// en translation: Monthly bonus
      ///
      /// Locales: en, zh-Hans
      static func vip10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip10"
        }

        return NSLocalizedString("vip10", bundle: bundle, comment: "")
      }

      /// en translation: Monthly gift
      ///
      /// Locales: en, zh-Hans
      static func vip24(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip24", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip24"
        }

        return NSLocalizedString("vip24", bundle: bundle, comment: "")
      }

      /// en translation: Monthly report query
      ///
      /// Locales: en, zh-Hans
      static func agency30(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency30", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency30"
        }

        return NSLocalizedString("agency30", bundle: bundle, comment: "")
      }

      /// en translation: More credits needed:
      ///
      /// Locales: en, zh-Hans
      static func vip6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip6"
        }

        return NSLocalizedString("vip6", bundle: bundle, comment: "")
      }

      /// en translation: More popular games
      ///
      /// Locales: en, zh-Hans
      static func game2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("game2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "game2"
        }

        return NSLocalizedString("game2", bundle: bundle, comment: "")
      }

      /// en translation: Multi-currency
      ///
      /// Locales: en, zh-Hans
      static func home13(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home13", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home13"
        }

        return NSLocalizedString("home13", bundle: bundle, comment: "")
      }

      /// en translation: Must be a combination of 6 to 16 letters and numbers
      ///
      /// Locales: en, zh-Hans
      static func new3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new3"
        }

        return NSLocalizedString("new3", bundle: bundle, comment: "")
      }

      /// en translation: Must be a combination of 8 to 20 letters and numbers
      ///
      /// Locales: en, zh-Hans
      static func vip21(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip21", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip21"
        }

        return NSLocalizedString("vip21", bundle: bundle, comment: "")
      }

      /// en translation: Must be the same city where you apply for the card
      ///
      /// Locales: en, zh-Hans
      static func card16(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card16", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card16"
        }

        return NSLocalizedString("card16", bundle: bundle, comment: "")
      }

      /// en translation: Must be the same province where you apply for the card
      ///
      /// Locales: en, zh-Hans
      static func card15(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card15", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card15"
        }

        return NSLocalizedString("card15", bundle: bundle, comment: "")
      }

      /// en translation: Must be your issuing bank branch
      ///
      /// Locales: en, zh-Hans
      static func card13(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card13", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card13"
        }

        return NSLocalizedString("card13", bundle: bundle, comment: "")
      }

      /// en translation: Must enter 6 to 22 numbers
      ///
      /// Locales: en, zh-Hans
      static func card14(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card14", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card14"
        }

        return NSLocalizedString("card14", bundle: bundle, comment: "")
      }

      /// en translation: My cash flow
      ///
      /// Locales: en, zh-Hans
      static func agency52(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency52", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency52"
        }

        return NSLocalizedString("agency52", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, zh-Hans
      static func recharge30(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge30", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge30"
        }

        return NSLocalizedString("recharge30", bundle: bundle, comment: "")
      }

      /// en translation: Net profit
      ///
      /// Locales: en, zh-Hans
      static func agency26(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency26", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency26"
        }

        return NSLocalizedString("agency26", bundle: bundle, comment: "")
      }

      /// en translation: Net profit
      ///
      /// Locales: en, zh-Hans
      static func agency32(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency32", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency32"
        }

        return NSLocalizedString("agency32", bundle: bundle, comment: "")
      }

      /// en translation: Network error. Please check your network
      ///
      /// Locales: en, zh-Hans
      static func txt1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt1"
        }

        return NSLocalizedString("txt1", bundle: bundle, comment: "")
      }

      /// en translation: New login password
      ///
      /// Locales: en, zh-Hans
      static func login22(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login22", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login22"
        }

        return NSLocalizedString("login22", bundle: bundle, comment: "")
      }

      /// en translation: New password
      ///
      /// Locales: en, zh-Hans
      static func new_psd2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_psd2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_psd2"
        }

        return NSLocalizedString("new_psd2", bundle: bundle, comment: "")
      }

      /// en translation: New per capita deposit
      ///
      /// Locales: en, zh-Hans
      static func agency19(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency19", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency19"
        }

        return NSLocalizedString("agency19", bundle: bundle, comment: "")
      }

      /// en translation: No application required
      ///
      /// Locales: en, zh-Hans
      static func discount2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discount2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "discount2"
        }

        return NSLocalizedString("discount2", bundle: bundle, comment: "")
      }

      /// en translation: No beneficiary bank card
      ///
      /// Locales: en, zh-Hans
      static func errorTxt11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt11"
        }

        return NSLocalizedString("errorTxt11", bundle: bundle, comment: "")
      }

      /// en translation: No data found
      ///
      /// Locales: en, zh-Hans
      static func game1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("game1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "game1"
        }

        return NSLocalizedString("game1", bundle: bundle, comment: "")
      }

      /// en translation: No fee
      ///
      /// Locales: en, zh-Hans
      static func recharge18(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge18", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge18"
        }

        return NSLocalizedString("recharge18", bundle: bundle, comment: "")
      }

      /// en translation: No message
      ///
      /// Locales: en, zh-Hans
      static func accountDiscount6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accountDiscount6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accountDiscount6"
        }

        return NSLocalizedString("accountDiscount6", bundle: bundle, comment: "")
      }

      /// en translation: No more
      ///
      /// Locales: en, zh-Hans
      static func noMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noMore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noMore"
        }

        return NSLocalizedString("noMore", bundle: bundle, comment: "")
      }

      /// en translation: No more
      ///
      /// Locales: en, zh-Hans
      static func recharge11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge11"
        }

        return NSLocalizedString("recharge11", bundle: bundle, comment: "")
      }

      /// en translation: No offer available
      ///
      /// Locales: en, zh-Hans
      static func accountDiscount0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accountDiscount0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accountDiscount0"
        }

        return NSLocalizedString("accountDiscount0", bundle: bundle, comment: "")
      }

      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static func discount6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discount6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "discount6"
        }

        return NSLocalizedString("discount6", bundle: bundle, comment: "")
      }

      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static func errorTxt1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt1"
        }

        return NSLocalizedString("errorTxt1", bundle: bundle, comment: "")
      }

      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static func noData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noData", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noData"
        }

        return NSLocalizedString("noData", bundle: bundle, comment: "")
      }

      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static func notice1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notice1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notice1"
        }

        return NSLocalizedString("notice1", bundle: bundle, comment: "")
      }

      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static func recharge45(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge45", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge45"
        }

        return NSLocalizedString("recharge45", bundle: bundle, comment: "")
      }

      /// en translation: No records
      ///
      /// Locales: en, zh-Hans
      static func vip19(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip19", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip19"
        }

        return NSLocalizedString("vip19", bundle: bundle, comment: "")
      }

      /// en translation: Not filled yet
      ///
      /// Locales: en, zh-Hans
      static func massage5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("massage5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "massage5"
        }

        return NSLocalizedString("massage5", bundle: bundle, comment: "")
      }

      /// en translation: Not winning
      ///
      /// Locales: en, zh-Hans
      static func lotteryTxt9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lotteryTxt9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lotteryTxt9"
        }

        return NSLocalizedString("lotteryTxt9", bundle: bundle, comment: "")
      }

      /// en translation: Notification
      ///
      /// Locales: en, zh-Hans
      static func card17(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card17", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card17"
        }

        return NSLocalizedString("card17", bundle: bundle, comment: "")
      }

      /// en translation: Number of spin remaining
      ///
      /// Locales: en, zh-Hans
      static func lotteryTxt2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lotteryTxt2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lotteryTxt2"
        }

        return NSLocalizedString("lotteryTxt2", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, zh-Hans
      static func card20(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card20", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card20"
        }

        return NSLocalizedString("card20", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, zh-Hans
      static func text4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("text4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "text4"
        }

        return NSLocalizedString("text4", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, zh-Hans
      static func withdraw5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw5"
        }

        return NSLocalizedString("withdraw5", bundle: bundle, comment: "")
      }

      /// en translation: Offer
      ///
      /// Locales: en, zh-Hans
      static func footer1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("footer1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "footer1"
        }

        return NSLocalizedString("footer1", bundle: bundle, comment: "")
      }

      /// en translation: Offer information
      ///
      /// Locales: en, zh-Hans
      static func account11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account11"
        }

        return NSLocalizedString("account11", bundle: bundle, comment: "")
      }

      /// en translation: Offer rebate
      ///
      /// Locales: en, zh-Hans
      static func type2Txt10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type2Txt10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type2Txt10"
        }

        return NSLocalizedString("type2Txt10", bundle: bundle, comment: "")
      }

      /// en translation: Offline deposit
      ///
      /// Locales: en, zh-Hans
      static func recharge6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge6"
        }

        return NSLocalizedString("recharge6", bundle: bundle, comment: "")
      }

      /// en translation: Old password
      ///
      /// Locales: en, zh-Hans
      static func new_psd1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_psd1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_psd1"
        }

        return NSLocalizedString("new_psd1", bundle: bundle, comment: "")
      }

      /// en translation: One-click refresh successful
      ///
      /// Locales: en, zh-Hans
      static func account24(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account24", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account24"
        }

        return NSLocalizedString("account24", bundle: bundle, comment: "")
      }

      /// en translation: One-click sharing
      ///
      /// Locales: en, zh-Hans
      static func agency49(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency49", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency49"
        }

        return NSLocalizedString("agency49", bundle: bundle, comment: "")
      }

      /// en translation: One-click transfer back
      ///
      /// Locales: en, zh-Hans
      static func wallet0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet0"
        }

        return NSLocalizedString("wallet0", bundle: bundle, comment: "")
      }

      /// en translation: Online deposit by debit card
      ///
      /// Locales: en, zh-Hans
      static func recharge16(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge16", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge16"
        }

        return NSLocalizedString("recharge16", bundle: bundle, comment: "")
      }

      /// en translation: Order number
      ///
      /// Locales: en, zh-Hans
      static func account20(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account20", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account20"
        }

        return NSLocalizedString("account20", bundle: bundle, comment: "")
      }

      /// en translation: Order number
      ///
      /// Locales: en, zh-Hans
      static func recharge12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge12"
        }

        return NSLocalizedString("recharge12", bundle: bundle, comment: "")
      }

      /// en translation: Other costs include: bonus, service fees, revenue, deposit etc.
      ///
      /// Locales: en, zh-Hans
      static func new1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new1"
        }

        return NSLocalizedString("new1", bundle: bundle, comment: "")
      }

      /// en translation: Others
      ///
      /// Locales: en, zh-Hans
      static func help5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help5"
        }

        return NSLocalizedString("help5", bundle: bundle, comment: "")
      }

      /// en translation: Out of service
      ///
      /// Locales: en, zh-Hans
      static func txt3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt3"
        }

        return NSLocalizedString("txt3", bundle: bundle, comment: "")
      }

      /// en translation: PHP
      ///
      /// Locales: en, zh-Hans
      static func account3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account3"
        }

        return NSLocalizedString("account3", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, zh-Hans
      static func login3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login3"
        }

        return NSLocalizedString("login3", bundle: bundle, comment: "")
      }

      /// en translation: Password changed successfully; please log in again
      ///
      /// Locales: en, zh-Hans
      static func new_psd8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_psd8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_psd8"
        }

        return NSLocalizedString("new_psd8", bundle: bundle, comment: "")
      }

      /// en translation: Pay
      ///
      /// Locales: en, zh-Hans
      static func recharge21(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge21", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge21"
        }

        return NSLocalizedString("recharge21", bundle: bundle, comment: "")
      }

      /// en translation: Payment method
      ///
      /// Locales: en, zh-Hans
      static func recharge15(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge15", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge15"
        }

        return NSLocalizedString("recharge15", bundle: bundle, comment: "")
      }

      /// en translation: Payment tutorial
      ///
      /// Locales: en, zh-Hans
      static func recharge36(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge36", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge36"
        }

        return NSLocalizedString("recharge36", bundle: bundle, comment: "")
      }

      /// en translation: Percentage
      ///
      /// Locales: en, zh-Hans
      static func agency25(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency25", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency25"
        }

        return NSLocalizedString("agency25", bundle: bundle, comment: "")
      }

      /// en translation: Personal back office
      ///
      /// Locales: en, zh-Hans
      static func agency41(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency41", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency41"
        }

        return NSLocalizedString("agency41", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, zh-Hans
      static func login10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login10"
        }

        return NSLocalizedString("login10", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, zh-Hans
      static func massage2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("massage2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "massage2"
        }

        return NSLocalizedString("massage2", bundle: bundle, comment: "")
      }

      /// en translation: Phone verification code
      ///
      /// Locales: en, zh-Hans
      static func login13(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login13", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login13"
        }

        return NSLocalizedString("login13", bundle: bundle, comment: "")
      }

      /// en translation: Platform announcement
      ///
      /// Locales: en, zh-Hans
      static func text0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("text0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "text0"
        }

        return NSLocalizedString("text0", bundle: bundle, comment: "")
      }

      /// en translation: Please add a bank card!
      ///
      /// Locales: en, zh-Hans
      static func errorTxt8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt8"
        }

        return NSLocalizedString("errorTxt8", bundle: bundle, comment: "")
      }

      /// en translation: Please add your card details first
      ///
      /// Locales: en, zh-Hans
      static func card4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card4"
        }

        return NSLocalizedString("card4", bundle: bundle, comment: "")
      }

      /// en translation: Please agree to the terms
      ///
      /// Locales: en, zh-Hans
      static func login17(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login17", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login17"
        }

        return NSLocalizedString("login17", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the correct amount
      ///
      /// Locales: en, zh-Hans
      static func new9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new9"
        }

        return NSLocalizedString("new9", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the deposit amount!
      ///
      /// Locales: en, zh-Hans
      static func errorTxt9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt9"
        }

        return NSLocalizedString("errorTxt9", bundle: bundle, comment: "")
      }

      /// en translation: Please enter verification code
      ///
      /// Locales: en, zh-Hans
      static func login21(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login21", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login21"
        }

        return NSLocalizedString("login21", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your account
      ///
      /// Locales: en, zh-Hans
      static func login4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login4"
        }

        return NSLocalizedString("login4", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your new password
      ///
      /// Locales: en, zh-Hans
      static func new_psd6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_psd6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_psd6"
        }

        return NSLocalizedString("new_psd6", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your old password
      ///
      /// Locales: en, zh-Hans
      static func new_psd5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_psd5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_psd5"
        }

        return NSLocalizedString("new_psd5", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your password
      ///
      /// Locales: en, zh-Hans
      static func login5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login5"
        }

        return NSLocalizedString("login5", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your phone number
      ///
      /// Locales: en, zh-Hans
      static func errorTxt15(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt15", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt15"
        }

        return NSLocalizedString("errorTxt15", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your phone number
      ///
      /// Locales: en, zh-Hans
      static func login32(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login32", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login32"
        }

        return NSLocalizedString("login32", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your registered phone number
      ///
      /// Locales: en, zh-Hans
      static func login18(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login18", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login18"
        }

        return NSLocalizedString("login18", bundle: bundle, comment: "")
      }

      /// en translation: Please select a bank card
      ///
      /// Locales: en, zh-Hans
      static func withdraw8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw8"
        }

        return NSLocalizedString("withdraw8", bundle: bundle, comment: "")
      }

      /// en translation: Please select a bank name
      ///
      /// Locales: en, zh-Hans
      static func errorTxt14(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt14", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt14"
        }

        return NSLocalizedString("errorTxt14", bundle: bundle, comment: "")
      }

      /// en translation: Please select a bank to deposit
      ///
      /// Locales: en, zh-Hans
      static func new10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new10"
        }

        return NSLocalizedString("new10", bundle: bundle, comment: "")
      }

      /// en translation: Please select a date!
      ///
      /// Locales: en, zh-Hans
      static func errorTxt2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt2"
        }

        return NSLocalizedString("errorTxt2", bundle: bundle, comment: "")
      }

      /// en translation: Please select a game type!
      ///
      /// Locales: en, zh-Hans
      static func errorTxt5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt5"
        }

        return NSLocalizedString("errorTxt5", bundle: bundle, comment: "")
      }

      /// en translation: Please select a payment method!
      ///
      /// Locales: en, zh-Hans
      static func errorTxt6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt6"
        }

        return NSLocalizedString("errorTxt6", bundle: bundle, comment: "")
      }

      /// en translation: Please select the type of your account details!
      ///
      /// Locales: en, zh-Hans
      static func errorTxt3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt3"
        }

        return NSLocalizedString("errorTxt3", bundle: bundle, comment: "")
      }

      /// en translation: Please select the type of your transaction records!
      ///
      /// Locales: en, zh-Hans
      static func errorTxt4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt4"
        }

        return NSLocalizedString("errorTxt4", bundle: bundle, comment: "")
      }

      /// en translation: Please use 4-10 letters or numbers and start with a letter
      ///
      /// Locales: en, zh-Hans
      static func login6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login6"
        }

        return NSLocalizedString("login6", bundle: bundle, comment: "")
      }

      /// en translation: Please use 4-10 letters, numbers or symbols
      ///
      /// Locales: en, zh-Hans
      static func login7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login7"
        }

        return NSLocalizedString("login7", bundle: bundle, comment: "")
      }

      /// en translation: Please use the bank card account number bound at the time of registration to recharge
      ///
      /// Locales: en, zh-Hans
      static func recharge47(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge47", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge47"
        }

        return NSLocalizedString("recharge47", bundle: bundle, comment: "")
      }

      /// en translation: Please use your real name
      ///
      /// Locales: en, zh-Hans
      static func massage4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("massage4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "massage4"
        }

        return NSLocalizedString("massage4", bundle: bundle, comment: "")
      }

      /// en translation: Points
      ///
      /// Locales: en, zh-Hans
      static func vip26(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip26", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip26"
        }

        return NSLocalizedString("vip26", bundle: bundle, comment: "")
      }

      /// en translation: Popular
      ///
      /// Locales: en, zh-Hans
      static func home15(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home15", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home15"
        }

        return NSLocalizedString("home15", bundle: bundle, comment: "")
      }

      /// en translation: Popular games
      ///
      /// Locales: en, zh-Hans
      static func game3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("game3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "game3"
        }

        return NSLocalizedString("game3", bundle: bundle, comment: "")
      }

      /// en translation: Privacy agreement
      ///
      /// Locales: en, zh-Hans
      static func help4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help4"
        }

        return NSLocalizedString("help4", bundle: bundle, comment: "")
      }

      /// en translation: Processing time
      ///
      /// Locales: en, zh-Hans
      static func recharge32(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge32", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge32"
        }

        return NSLocalizedString("recharge32", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en, zh-Hans
      static func account7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account7"
        }

        return NSLocalizedString("account7", bundle: bundle, comment: "")
      }

      /// en translation: Profit
      ///
      /// Locales: en, zh-Hans
      static func agency22(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency22", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency22"
        }

        return NSLocalizedString("agency22", bundle: bundle, comment: "")
      }

      /// en translation: Promotion and distribution
      ///
      /// Locales: en, zh-Hans
      static func account10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account10"
        }

        return NSLocalizedString("account10", bundle: bundle, comment: "")
      }

      /// en translation: Promotion and distribution
      ///
      /// Locales: en, zh-Hans
      static func agency0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency0"
        }

        return NSLocalizedString("agency0", bundle: bundle, comment: "")
      }

      /// en translation: Promotion details
      ///
      /// Locales: en, zh-Hans
      static func account12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account12"
        }

        return NSLocalizedString("account12", bundle: bundle, comment: "")
      }

      /// en translation: Promotion details
      ///
      /// Locales: en, zh-Hans
      static func discount1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discount1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "discount1"
        }

        return NSLocalizedString("discount1", bundle: bundle, comment: "")
      }

      /// en translation: Promotion time
      ///
      /// Locales: en, zh-Hans
      static func discount3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discount3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "discount3"
        }

        return NSLocalizedString("discount3", bundle: bundle, comment: "")
      }

      /// en translation: Promotions
      ///
      /// Locales: en, zh-Hans
      static func discount0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discount0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "discount0"
        }

        return NSLocalizedString("discount0", bundle: bundle, comment: "")
      }

      /// en translation: Re-enter the new password
      ///
      /// Locales: en, zh-Hans
      static func login9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login9"
        }

        return NSLocalizedString("login9", bundle: bundle, comment: "")
      }

      /// en translation: Read operation successfully
      ///
      /// Locales: en, zh-Hans
      static func new11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new11"
        }

        return NSLocalizedString("new11", bundle: bundle, comment: "")
      }

      /// en translation: Real name
      ///
      /// Locales: en, zh-Hans
      static func massage1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("massage1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "massage1"
        }

        return NSLocalizedString("massage1", bundle: bundle, comment: "")
      }

      /// en translation: Rebate
      ///
      /// Locales: en, zh-Hans
      static func type2Txt4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type2Txt4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type2Txt4"
        }

        return NSLocalizedString("type2Txt4", bundle: bundle, comment: "")
      }

      /// en translation: Referral Code
      ///
      /// Locales: en, zh-Hans
      static func agency48(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency48", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency48"
        }

        return NSLocalizedString("agency48", bundle: bundle, comment: "")
      }

      /// en translation: Referral code
      ///
      /// Locales: en, zh-Hans
      static func agency3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency3"
        }

        return NSLocalizedString("agency3", bundle: bundle, comment: "")
      }

      /// en translation: Referral code
      ///
      /// Locales: en, zh-Hans
      static func login14(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login14", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login14"
        }

        return NSLocalizedString("login14", bundle: bundle, comment: "")
      }

      /// en translation: Refreshing...
      ///
      /// Locales: en, zh-Hans
      static func currentTxt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currentTxt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "currentTxt"
        }

        return NSLocalizedString("currentTxt", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en, zh-Hans
      static func home1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home1"
        }

        return NSLocalizedString("home1", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en, zh-Hans
      static func login1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login1"
        }

        return NSLocalizedString("login1", bundle: bundle, comment: "")
      }

      /// en translation: Register account
      ///
      /// Locales: en, zh-Hans
      static func login35(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login35", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login35"
        }

        return NSLocalizedString("login35", bundle: bundle, comment: "")
      }

      /// en translation: Register now
      ///
      /// Locales: en, zh-Hans
      static func login31(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login31", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login31"
        }

        return NSLocalizedString("login31", bundle: bundle, comment: "")
      }

      /// en translation: Registered user
      ///
      /// Locales: en, zh-Hans
      static func agency14(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency14", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency14"
        }

        return NSLocalizedString("agency14", bundle: bundle, comment: "")
      }

      /// en translation: Regulations
      ///
      /// Locales: en, zh-Hans
      static func home10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home10"
        }

        return NSLocalizedString("home10", bundle: bundle, comment: "")
      }

      /// en translation: Required
      ///
      /// Locales: en, zh-Hans
      static func wallet6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet6"
        }

        return NSLocalizedString("wallet6", bundle: bundle, comment: "")
      }

      /// en translation: Required
      ///
      /// Locales: en, zh-Hans
      static func withdraw13(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw13", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw13"
        }

        return NSLocalizedString("withdraw13", bundle: bundle, comment: "")
      }

      /// en translation: Restore all game credits,
      ///
      /// Locales: en, zh-Hans
      static func wallet1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet1"
        }

        return NSLocalizedString("wallet1", bundle: bundle, comment: "")
      }

      /// en translation: Retrieve account
      ///
      /// Locales: en, zh-Hans
      static func login26(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login26", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login26"
        }

        return NSLocalizedString("login26", bundle: bundle, comment: "")
      }

      /// en translation: Retrieve password
      ///
      /// Locales: en, zh-Hans
      static func login34(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login34", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login34"
        }

        return NSLocalizedString("login34", bundle: bundle, comment: "")
      }

      /// en translation: Rules
      ///
      /// Locales: en, zh-Hans
      static func lotteryTxt1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lotteryTxt1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lotteryTxt1"
        }

        return NSLocalizedString("lotteryTxt1", bundle: bundle, comment: "")
      }

      /// en translation: Rules introduction
      ///
      /// Locales: en, zh-Hans
      static func agency1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency1"
        }

        return NSLocalizedString("agency1", bundle: bundle, comment: "")
      }

      /// en translation: Rules introduction
      ///
      /// Locales: en, zh-Hans
      static func agency35(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency35", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency35"
        }

        return NSLocalizedString("agency35", bundle: bundle, comment: "")
      }

      /// en translation: Safe payment
      ///
      /// Locales: en, zh-Hans
      static func home4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home4"
        }

        return NSLocalizedString("home4", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, zh-Hans
      static func massage3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("massage3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "massage3"
        }

        return NSLocalizedString("massage3", bundle: bundle, comment: "")
      }

      /// en translation: Scroll down to load more
      ///
      /// Locales: en, zh-Hans
      static func accountDiscount3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accountDiscount3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accountDiscount3"
        }

        return NSLocalizedString("accountDiscount3", bundle: bundle, comment: "")
      }

      /// en translation: Scroll down to load more
      ///
      /// Locales: en, zh-Hans
      static func addMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addMore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addMore"
        }

        return NSLocalizedString("addMore", bundle: bundle, comment: "")
      }

      /// en translation: Scroll down to refresh...
      ///
      /// Locales: en, zh-Hans
      static func pullTxt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pullTxt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pullTxt"
        }

        return NSLocalizedString("pullTxt", bundle: bundle, comment: "")
      }

      /// en translation: Search games
      ///
      /// Locales: en, zh-Hans
      static func game0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("game0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "game0"
        }

        return NSLocalizedString("game0", bundle: bundle, comment: "")
      }

      /// en translation: Send password set notification
      ///
      /// Locales: en, zh-Hans
      static func login19(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login19", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login19"
        }

        return NSLocalizedString("login19", bundle: bundle, comment: "")
      }

      /// en translation: Send the verification code
      ///
      /// Locales: en, zh-Hans
      static func login11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login11"
        }

        return NSLocalizedString("login11", bundle: bundle, comment: "")
      }

      /// en translation: Sending back to main wallet?
      ///
      /// Locales: en, zh-Hans
      static func wallet8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet8"
        }

        return NSLocalizedString("wallet8", bundle: bundle, comment: "")
      }

      /// en translation: Sent
      ///
      /// Locales: en, zh-Hans
      static func wallet4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet4"
        }

        return NSLocalizedString("wallet4", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en, zh-Hans
      static func agency4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency4"
        }

        return NSLocalizedString("agency4", bundle: bundle, comment: "")
      }

      /// en translation: Share to
      ///
      /// Locales: en, zh-Hans
      static func agency5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency5"
        }

        return NSLocalizedString("agency5", bundle: bundle, comment: "")
      }

      /// en translation: Shareholder
      ///
      /// Locales: en, zh-Hans
      static func footer3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("footer3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "footer3"
        }

        return NSLocalizedString("footer3", bundle: bundle, comment: "")
      }

      /// en translation: Shareholder
      ///
      /// Locales: en, zh-Hans
      static func footer5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("footer5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "footer5"
        }

        return NSLocalizedString("footer5", bundle: bundle, comment: "")
      }

      /// en translation: Shareholder dividends
      ///
      /// Locales: en, zh-Hans
      static func agency56(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency56", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency56"
        }

        return NSLocalizedString("agency56", bundle: bundle, comment: "")
      }

      /// en translation: Shares
      ///
      /// Locales: en, zh-Hans
      static func agency55(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency55", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency55"
        }

        return NSLocalizedString("agency55", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, zh-Hans
      static func account17(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account17", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account17"
        }

        return NSLocalizedString("account17", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, zh-Hans
      static func finance0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance0"
        }

        return NSLocalizedString("finance0", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, zh-Hans
      static func lotteryTxt3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lotteryTxt3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lotteryTxt3"
        }

        return NSLocalizedString("lotteryTxt3", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, zh-Hans
      static func recharge7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge7"
        }

        return NSLocalizedString("recharge7", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, zh-Hans
      static func vip20(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip20", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip20"
        }

        return NSLocalizedString("vip20", bundle: bundle, comment: "")
      }

      /// en translation: Start date
      ///
      /// Locales: en, zh-Hans
      static func new4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new4"
        }

        return NSLocalizedString("new4", bundle: bundle, comment: "")
      }

      /// en translation: Statistics
      ///
      /// Locales: en, zh-Hans
      static func home12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home12"
        }

        return NSLocalizedString("home12", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: en, zh-Hans
      static func finance18(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance18", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance18"
        }

        return NSLocalizedString("finance18", bundle: bundle, comment: "")
      }

      /// en translation: Sub-member
      ///
      /// Locales: en, zh-Hans
      static func agency11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency11"
        }

        return NSLocalizedString("agency11", bundle: bundle, comment: "")
      }

      /// en translation: Sub-member amount
      ///
      /// Locales: en, zh-Hans
      static func agency16(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency16", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency16"
        }

        return NSLocalizedString("agency16", bundle: bundle, comment: "")
      }

      /// en translation: Sub-member cash flow
      ///
      /// Locales: en, zh-Hans
      static func agency46(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency46", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency46"
        }

        return NSLocalizedString("agency46", bundle: bundle, comment: "")
      }

      /// en translation: Sub-member cash flow
      ///
      /// Locales: en, zh-Hans
      static func agency53(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency53", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency53"
        }

        return NSLocalizedString("agency53", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans
      static func recharge35(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge35", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge35"
        }

        return NSLocalizedString("recharge35", bundle: bundle, comment: "")
      }

      /// en translation: Successfully saved
      ///
      /// Locales: en, zh-Hans
      static func new7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new7"
        }

        return NSLocalizedString("new7", bundle: bundle, comment: "")
      }

      /// en translation: Telegram is not installed
      ///
      /// Locales: en, zh-Hans
      static func new14(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new14", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new14"
        }

        return NSLocalizedString("new14", bundle: bundle, comment: "")
      }

      /// en translation: The maximum deposit amount is
      ///
      /// Locales: en, zh-Hans
      static func errorTxt17(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt17", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt17"
        }

        return NSLocalizedString("errorTxt17", bundle: bundle, comment: "")
      }

      /// en translation: The minimum deposit amount is
      ///
      /// Locales: en, zh-Hans
      static func errorTxt7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt7"
        }

        return NSLocalizedString("errorTxt7", bundle: bundle, comment: "")
      }

      /// en translation: The minimum withdrawal amount is
      ///
      /// Locales: en, zh-Hans
      static func errorTxt16(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt16", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt16"
        }

        return NSLocalizedString("errorTxt16", bundle: bundle, comment: "")
      }

      /// en translation: The minimum withdrawal amount is
      ///
      /// Locales: en, zh-Hans
      static func withdraw15(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw15", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw15"
        }

        return NSLocalizedString("withdraw15", bundle: bundle, comment: "")
      }

      /// en translation: The number of draws has been used up
      ///
      /// Locales: en, zh-Hans
      static func new20(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new20", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new20"
        }

        return NSLocalizedString("new20", bundle: bundle, comment: "")
      }

      /// en translation: The start time cannot be later than the end time!
      ///
      /// Locales: en, zh-Hans
      static func finance19(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance19", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance19"
        }

        return NSLocalizedString("finance19", bundle: bundle, comment: "")
      }

      /// en translation: The system is set at default to collect the statistics every 10 minutes. Please refresh in time
      ///
      /// Locales: en, zh-Hans
      static func agency13(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency13", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency13"
        }

        return NSLocalizedString("agency13", bundle: bundle, comment: "")
      }

      /// en translation: The system will automatically add the credit limit within 1-2 minutes
      ///
      /// Locales: en, zh-Hans
      static func recharge48(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge48", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge48"
        }

        return NSLocalizedString("recharge48", bundle: bundle, comment: "")
      }

      /// en translation: The two passwords do not match
      ///
      /// Locales: en, zh-Hans
      static func login33(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login33", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login33"
        }

        return NSLocalizedString("login33", bundle: bundle, comment: "")
      }

      /// en translation: The two passwords you entered do not match
      ///
      /// Locales: en, zh-Hans
      static func new_psd4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_psd4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_psd4"
        }

        return NSLocalizedString("new_psd4", bundle: bundle, comment: "")
      }

      /// en translation: This action will transfer all balances back to the main wallet, do you want to continue?
      ///
      /// Locales: en, zh-Hans
      static func withdraw3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw3"
        }

        return NSLocalizedString("withdraw3", bundle: bundle, comment: "")
      }

      /// en translation: To retrieve your account, please click the button below to contact customer support
      ///
      /// Locales: en, zh-Hans
      static func login27(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login27", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login27"
        }

        return NSLocalizedString("login27", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, zh-Hans
      static func agency51(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency51", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency51"
        }

        return NSLocalizedString("agency51", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, zh-Hans
      static func vip18(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip18", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip18"
        }

        return NSLocalizedString("vip18", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, zh-Hans
      static func wallet7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet7"
        }

        return NSLocalizedString("wallet7", bundle: bundle, comment: "")
      }

      /// en translation: Total amount
      ///
      /// Locales: en, zh-Hans
      static func account2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account2"
        }

        return NSLocalizedString("account2", bundle: bundle, comment: "")
      }

      /// en translation: Total audit deduction
      ///
      /// Locales: en, zh-Hans
      static func wallet5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet5"
        }

        return NSLocalizedString("wallet5", bundle: bundle, comment: "")
      }

      /// en translation: Total bet
      ///
      /// Locales: en, zh-Hans
      static func account21(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account21", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account21"
        }

        return NSLocalizedString("account21", bundle: bundle, comment: "")
      }

      /// en translation: Total bet
      ///
      /// Locales: en, zh-Hans
      static func vip23(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip23", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip23"
        }

        return NSLocalizedString("vip23", bundle: bundle, comment: "")
      }

      /// en translation: Total cash flow
      ///
      /// Locales: en, zh-Hans
      static func agency28(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency28", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency28"
        }

        return NSLocalizedString("agency28", bundle: bundle, comment: "")
      }

      /// en translation: Total deposit
      ///
      /// Locales: en, zh-Hans
      static func finance2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance2"
        }

        return NSLocalizedString("finance2", bundle: bundle, comment: "")
      }

      /// en translation: Total deposit
      ///
      /// Locales: en, zh-Hans
      static func vip22(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip22", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip22"
        }

        return NSLocalizedString("vip22", bundle: bundle, comment: "")
      }

      /// en translation: Total deposit amount
      ///
      /// Locales: en, zh-Hans
      static func agency18(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency18", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency18"
        }

        return NSLocalizedString("agency18", bundle: bundle, comment: "")
      }

      /// en translation: Total number of people who deposit
      ///
      /// Locales: en, zh-Hans
      static func agency17(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency17", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency17"
        }

        return NSLocalizedString("agency17", bundle: bundle, comment: "")
      }

      /// en translation: Total profit
      ///
      /// Locales: en, zh-Hans
      static func agency29(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency29", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency29"
        }

        return NSLocalizedString("agency29", bundle: bundle, comment: "")
      }

      /// en translation: Total wins and losses
      ///
      /// Locales: en, zh-Hans
      static func account22(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account22", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account22"
        }

        return NSLocalizedString("account22", bundle: bundle, comment: "")
      }

      /// en translation: Total withdrawal
      ///
      /// Locales: en, zh-Hans
      static func finance3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance3"
        }

        return NSLocalizedString("finance3", bundle: bundle, comment: "")
      }

      /// en translation: Transaction amount
      ///
      /// Locales: en, zh-Hans
      static func recharge31(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge31", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge31"
        }

        return NSLocalizedString("recharge31", bundle: bundle, comment: "")
      }

      /// en translation: Type
      ///
      /// Locales: en, zh-Hans
      static func finance7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance7"
        }

        return NSLocalizedString("finance7", bundle: bundle, comment: "")
      }

      /// en translation: Unfortunately, you didn't win
      ///
      /// Locales: en, zh-Hans
      static func lotteryTxt7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lotteryTxt7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lotteryTxt7"
        }

        return NSLocalizedString("lotteryTxt7", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en, zh-Hans
      static func new_psd7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_psd7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_psd7"
        }

        return NSLocalizedString("new_psd7", bundle: bundle, comment: "")
      }

      /// en translation: Upgrade
      ///
      /// Locales: en, zh-Hans
      static func vip3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip3"
        }

        return NSLocalizedString("vip3", bundle: bundle, comment: "")
      }

      /// en translation: Upgrade gift
      ///
      /// Locales: en, zh-Hans
      static func vip25(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip25", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip25"
        }

        return NSLocalizedString("vip25", bundle: bundle, comment: "")
      }

      /// en translation: Upgrade or Degrade
      ///
      /// Locales: en, zh-Hans
      static func vip14(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip14", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip14"
        }

        return NSLocalizedString("vip14", bundle: bundle, comment: "")
      }

      /// en translation: User agreement
      ///
      /// Locales: en, zh-Hans
      static func help3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help3"
        }

        return NSLocalizedString("help3", bundle: bundle, comment: "")
      }

      /// en translation: User agreement
      ///
      /// Locales: en, zh-Hans
      static func login16(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login16", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login16"
        }

        return NSLocalizedString("login16", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en, zh-Hans
      static func card1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card1"
        }

        return NSLocalizedString("card1", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en, zh-Hans
      static func depositBank2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("depositBank2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "depositBank2"
        }

        return NSLocalizedString("depositBank2", bundle: bundle, comment: "")
      }

      /// en translation: Username cannot be less than 5 characters
      ///
      /// Locales: en, zh-Hans
      static func errorTxt12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTxt12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTxt12"
        }

        return NSLocalizedString("errorTxt12", bundle: bundle, comment: "")
      }

      /// en translation: VIP
      ///
      /// Locales: en, zh-Hans
      static func account8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account8"
        }

        return NSLocalizedString("account8", bundle: bundle, comment: "")
      }

      /// en translation: VIP benefits
      ///
      /// Locales: en, zh-Hans
      static func vip12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip12"
        }

        return NSLocalizedString("vip12", bundle: bundle, comment: "")
      }

      /// en translation: VIP benefits introduction
      ///
      /// Locales: en, zh-Hans
      static func vip2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip2"
        }

        return NSLocalizedString("vip2", bundle: bundle, comment: "")
      }

      /// en translation: VIP records
      ///
      /// Locales: en, zh-Hans
      static func vip0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vip0", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip0"
        }

        return NSLocalizedString("vip0", bundle: bundle, comment: "")
      }

      /// en translation: Valid user
      ///
      /// Locales: en, zh-Hans
      static func agency15(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency15", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency15"
        }

        return NSLocalizedString("agency15", bundle: bundle, comment: "")
      }

      /// en translation: Verification code
      ///
      /// Locales: en, zh-Hans
      static func login12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login12"
        }

        return NSLocalizedString("login12", bundle: bundle, comment: "")
      }

      /// en translation: Viber is not installed
      ///
      /// Locales: en, zh-Hans
      static func new16(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new16", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new16"
        }

        return NSLocalizedString("new16", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: en, zh-Hans
      static func agency8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency8"
        }

        return NSLocalizedString("agency8", bundle: bundle, comment: "")
      }

      /// en translation: Watch a video
      ///
      /// Locales: en, zh-Hans
      static func agency40(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency40", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency40"
        }

        return NSLocalizedString("agency40", bundle: bundle, comment: "")
      }

      /// en translation: Watch the video
      ///
      /// Locales: en, zh-Hans
      static func agency59(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency59", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency59"
        }

        return NSLocalizedString("agency59", bundle: bundle, comment: "")
      }

      /// en translation: WhatsApp is not installed
      ///
      /// Locales: en, zh-Hans
      static func new13(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new13", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new13"
        }

        return NSLocalizedString("new13", bundle: bundle, comment: "")
      }

      /// en translation: Win or lose amount
      ///
      /// Locales: en, zh-Hans
      static func game2Txt1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("game2Txt1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "game2Txt1"
        }

        return NSLocalizedString("game2Txt1", bundle: bundle, comment: "")
      }

      /// en translation: Winning
      ///
      /// Locales: en, zh-Hans
      static func lotteryTxt4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lotteryTxt4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lotteryTxt4"
        }

        return NSLocalizedString("lotteryTxt4", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw
      ///
      /// Locales: en, zh-Hans
      static func account5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account5"
        }

        return NSLocalizedString("account5", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw
      ///
      /// Locales: en, zh-Hans
      static func finance17(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance17", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance17"
        }

        return NSLocalizedString("finance17", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw
      ///
      /// Locales: en, zh-Hans
      static func type2Txt7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type2Txt7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type2Txt7"
        }

        return NSLocalizedString("type2Txt7", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw
      ///
      /// Locales: en, zh-Hans
      static func withdraw2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw2"
        }

        return NSLocalizedString("withdraw2", bundle: bundle, comment: "")
      }

      /// en translation: Withdrawable amount
      ///
      /// Locales: en, zh-Hans
      static func new6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new6"
        }

        return NSLocalizedString("new6", bundle: bundle, comment: "")
      }

      /// en translation: Withdrawal amount
      ///
      /// Locales: en, zh-Hans
      static func agency20(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency20", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency20"
        }

        return NSLocalizedString("agency20", bundle: bundle, comment: "")
      }

      /// en translation: Withdrawal amount
      ///
      /// Locales: en, zh-Hans
      static func withdraw17(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw17", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw17"
        }

        return NSLocalizedString("withdraw17", bundle: bundle, comment: "")
      }

      /// en translation: Withdrawal amount
      ///
      /// Locales: en, zh-Hans
      static func withdraw6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw6"
        }

        return NSLocalizedString("withdraw6", bundle: bundle, comment: "")
      }

      /// en translation: Withdrawal disabled
      ///
      /// Locales: en, zh-Hans
      static func type2Txt8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type2Txt8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type2Txt8"
        }

        return NSLocalizedString("type2Txt8", bundle: bundle, comment: "")
      }

      /// en translation: Withdrawal enabled
      ///
      /// Locales: en, zh-Hans
      static func type2Txt9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("type2Txt9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "type2Txt9"
        }

        return NSLocalizedString("type2Txt9", bundle: bundle, comment: "")
      }

      /// en translation: Withdrawal help
      ///
      /// Locales: en, zh-Hans
      static func help1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help1"
        }

        return NSLocalizedString("help1", bundle: bundle, comment: "")
      }

      /// en translation: Withdrawal records
      ///
      /// Locales: en, zh-Hans
      static func withdraw12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdraw12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdraw12"
        }

        return NSLocalizedString("withdraw12", bundle: bundle, comment: "")
      }

      /// en translation: You are not logged in to your account or your login details have expired; please log in again
      ///
      /// Locales: en, zh-Hans
      static func txt2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("txt2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "txt2"
        }

        return NSLocalizedString("txt2", bundle: bundle, comment: "")
      }

      /// en translation: You can check the data for last 31 days
      ///
      /// Locales: en, zh-Hans
      static func finance11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance11"
        }

        return NSLocalizedString("finance11", bundle: bundle, comment: "")
      }

      /// en translation: You can check the data for last 60 days
      ///
      /// Locales: en, zh-Hans
      static func finance10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finance10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finance10"
        }

        return NSLocalizedString("finance10", bundle: bundle, comment: "")
      }

      /// en translation: You can check the data for last 60 days
      ///
      /// Locales: en, zh-Hans
      static func recharge10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge10"
        }

        return NSLocalizedString("recharge10", bundle: bundle, comment: "")
      }

      /// en translation: Your bank
      ///
      /// Locales: en, zh-Hans
      static func recharge28(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge28", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge28"
        }

        return NSLocalizedString("recharge28", bundle: bundle, comment: "")
      }

      /// en translation: Your bank account
      ///
      /// Locales: en, zh-Hans
      static func recharge29(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge29", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge29"
        }

        return NSLocalizedString("recharge29", bundle: bundle, comment: "")
      }

      /// en translation: Your cash flow
      ///
      /// Locales: en, zh-Hans
      static func agency45(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency45", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency45"
        }

        return NSLocalizedString("agency45", bundle: bundle, comment: "")
      }

      /// en translation: hr.
      ///
      /// Locales: en, zh-Hans
      static func recharge33(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge33", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge33"
        }

        return NSLocalizedString("recharge33", bundle: bundle, comment: "")
      }

      /// en translation: min.
      ///
      /// Locales: en, zh-Hans
      static func recharge34(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recharge34", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recharge34"
        }

        return NSLocalizedString("recharge34", bundle: bundle, comment: "")
      }

      /// en translation: month
      ///
      /// Locales: en, zh-Hans
      static func new23(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new23", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new23"
        }

        return NSLocalizedString("new23", bundle: bundle, comment: "")
      }

      /// en translation: other costs
      ///
      /// Locales: en, zh-Hans
      static func new2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new2"
        }

        return NSLocalizedString("new2", bundle: bundle, comment: "")
      }

      /// en translation: registration success
      ///
      /// Locales: en, zh-Hans
      static func new24(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new24", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new24"
        }

        return NSLocalizedString("new24", bundle: bundle, comment: "")
      }

      /// en translation: total Costs
      ///
      /// Locales: en, zh-Hans
      static func agency61(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agency61", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agency61"
        }

        return NSLocalizedString("agency61", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _MyMarkerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyMarkerView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launch_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launch_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_icon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
